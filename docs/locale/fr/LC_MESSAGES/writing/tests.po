# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016. A <a
# href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a>
# Project. <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC
# BY-NC-SA 3.0</a>
# This file is distributed under the same license as the pythonguide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-03 01:22+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../writing/tests.rst:2
msgid "Testing Your Code"
msgstr ""

#: ../../writing/tests.rst:4
msgid "Testing your code is very important."
msgstr ""

#: ../../writing/tests.rst:6
msgid ""
"Getting used to writing the testing code and the running code in parallel"
" is now considered a good habit. Used wisely, this method helps you "
"define more precisely your code's intent and have a more decoupled "
"architecture."
msgstr ""

#: ../../writing/tests.rst:10
msgid "Some general rules of testing:"
msgstr ""

#: ../../writing/tests.rst:12
msgid ""
"A testing unit should focus on one tiny bit of functionality and prove it"
" correct."
msgstr ""

#: ../../writing/tests.rst:15
msgid ""
"Each test unit must be fully independent. Each of them must be able to "
"run alone, and also within the test suite, regardless of the order they "
"are called. The implication of this rule is that each test must be loaded"
" with a fresh dataset and may have to do some cleanup afterwards. This is"
" usually handled by :meth:`setUp()` and :meth:`tearDown()` methods."
msgstr ""

#: ../../writing/tests.rst:21
msgid ""
"Try hard to make tests that run fast. If one single test needs more than "
"a few milliseconds to run, development will be slowed down or the tests "
"will not be run as often as is desirable. In some cases, tests can't be "
"fast because they need a complex data structure to work on, and this data"
" structure must be loaded every time the test runs. Keep these heavier "
"tests in a separate test suite that is run by some scheduled task, and "
"run all other tests as often as needed."
msgstr ""

#: ../../writing/tests.rst:29
msgid ""
"Learn your tools and learn how to run a single test or a test case. Then,"
" when developing a function inside a module, run this function's tests "
"very often, ideally automatically when you save the code."
msgstr ""

#: ../../writing/tests.rst:33
msgid ""
"Always run the full test suite before a coding session, and run it again "
"after. This will give you more confidence that you did not break anything"
" in the rest of the code."
msgstr ""

#: ../../writing/tests.rst:37
msgid ""
"It is a good idea to implement a hook that runs all tests before pushing "
"code to a shared repository."
msgstr ""

#: ../../writing/tests.rst:40
msgid ""
"If you are in the middle of a development session and have to interrupt "
"your work, it is a good idea to write a broken unit test about what you "
"want to develop next. When coming back to work, you will have a pointer "
"to where you were and get back on track faster."
msgstr ""

#: ../../writing/tests.rst:45
msgid ""
"The first step when you are debugging your code is to write a new test "
"pinpointing the bug. While it is not always possible to do, those bug "
"catching tests are among the most valuable pieces of code in your "
"project."
msgstr ""

#: ../../writing/tests.rst:49
msgid ""
"Use long and descriptive names for testing functions. The style guide "
"here is slightly different than that of running code, where short names "
"are often preferred. The reason is testing functions are never called "
"explicitly. ``square()`` or even ``sqr()`` is ok in running code, but in "
"testing code you would have names such as ``test_square_of_number_2()``, "
"``test_square_negative_number()``. These function names are displayed "
"when a test fails, and should be as descriptive as possible."
msgstr ""

#: ../../writing/tests.rst:57
msgid ""
"When something goes wrong or has to be changed, and if your code has a "
"good set of tests, you or other maintainers will rely largely on the "
"testing suite to fix the problem or modify a given behavior. Therefore "
"the testing code will be read as much as or even more than the running "
"code. A unit test whose purpose is unclear is not very helpful in this "
"case."
msgstr ""

#: ../../writing/tests.rst:64
msgid ""
"Another use of the testing code is as an introduction to new developers. "
"When someone will have to work on the code base, running and reading the "
"related testing code is often the best they can do. They will or should "
"discover the hot spots, where most difficulties arise, and the corner "
"cases. If they have to add some functionality, the first step should be "
"to add a test and, by this means, ensure the new functionality is not "
"already a working path that has not been plugged into the interface."
msgstr ""

#: ../../writing/tests.rst:73
msgid "The Basics"
msgstr ""

#: ../../writing/tests.rst:77
msgid "Unittest"
msgstr ""

#: ../../writing/tests.rst:79
msgid ""
":mod:`unittest` is the batteries-included test module in the Python "
"standard library. Its API will be familiar to anyone who has used any of "
"the JUnit/nUnit/CppUnit series of tools."
msgstr ""

#: ../../writing/tests.rst:83
msgid ""
"Creating test cases is accomplished by subclassing "
":class:`unittest.TestCase`."
msgstr ""

#: ../../writing/tests.rst:96
msgid "As of Python 2.7 unittest also includes its own test discovery mechanisms."
msgstr ""

#: ../../writing/tests.rst:98
msgid ""
"`unittest in the standard library documentation "
"<http://docs.python.org/library/unittest.html>`_"
msgstr ""

#: ../../writing/tests.rst:102
msgid "Doctest"
msgstr ""

#: ../../writing/tests.rst:104
msgid ""
"The :mod:`doctest` module searches for pieces of text that look like "
"interactive Python sessions in docstrings, and then executes those "
"sessions to verify that they work exactly as shown."
msgstr ""

#: ../../writing/tests.rst:108
msgid ""
"Doctests have a different use case than proper unit tests: they are "
"usually less detailed and don't catch special cases or obscure regression"
" bugs. They are useful as an expressive documentation of the main use "
"cases of a module and its components. However, doctests should run "
"automatically each time the full test suite runs."
msgstr ""

#: ../../writing/tests.rst:114
msgid "A simple doctest in a function:"
msgstr ""

#: ../../writing/tests.rst:133
msgid ""
"When running this module from the command line as in ``python "
"module.py``, the doctests will run and complain if anything is not "
"behaving as described in the docstrings."
msgstr ""

#: ../../writing/tests.rst:138
msgid "Tools"
msgstr ""

#: ../../writing/tests.rst:142
msgid "py.test"
msgstr ""

#: ../../writing/tests.rst:144
msgid ""
"py.test is a no-boilerplate alternative to Python's standard unittest "
"module."
msgstr ""

#: ../../writing/tests.rst:150
msgid ""
"Despite being a fully-featured and extensible test tool, it boasts a "
"simple syntax. Creating a test suite is as easy as writing a module with "
"a couple of functions:"
msgstr ""

#: ../../writing/tests.rst:163
msgid "and then running the `py.test` command"
msgstr ""

#: ../../writing/tests.rst:185
msgid ""
"is far less work than would be required for the equivalent functionality "
"with the unittest module!"
msgstr ""

#: ../../writing/tests.rst:188
msgid "`py.test <http://pytest.org/latest/>`_"
msgstr ""

#: ../../writing/tests.rst:192
msgid "Nose"
msgstr ""

#: ../../writing/tests.rst:194
msgid "nose extends unittest to make testing easier."
msgstr ""

#: ../../writing/tests.rst:201
msgid ""
"nose provides automatic test discovery to save you the hassle of manually"
" creating test suites. It also provides numerous plugins for features "
"such as xUnit-compatible test output, coverage reporting, and test "
"selection."
msgstr ""

#: ../../writing/tests.rst:205
msgid "`nose <http://readthedocs.org/docs/nose/en/latest/>`_"
msgstr ""

#: ../../writing/tests.rst:209
msgid "tox"
msgstr ""

#: ../../writing/tests.rst:211
msgid ""
"tox is a tool for automating test environment management and testing "
"against multiple interpreter configurations"
msgstr ""

#: ../../writing/tests.rst:218
msgid ""
"tox allows you to configure complicated multi-parameter test matrices via"
" a simple ini-style configuration file."
msgstr ""

#: ../../writing/tests.rst:221
msgid "`tox <http://testrun.org/tox/latest/>`_"
msgstr ""

#: ../../writing/tests.rst:224
msgid "Unittest2"
msgstr ""

#: ../../writing/tests.rst:226
msgid ""
"unittest2 is a backport of Python 2.7's unittest module which has an "
"improved API and better assertions over the one available in previous "
"versions of Python."
msgstr ""

#: ../../writing/tests.rst:229
msgid "If you're using Python 2.6 or below, you can install it with pip"
msgstr ""

#: ../../writing/tests.rst:235
msgid ""
"You may want to import the module under the name unittest to make porting"
" code to newer versions of the module easier in the future"
msgstr ""

#: ../../writing/tests.rst:245
msgid ""
"This way if you ever switch to a newer Python version and no longer need "
"the unittest2 module, you can simply change the import in your test "
"module without the need to change any other code."
msgstr ""

#: ../../writing/tests.rst:249
msgid "`unittest2 <http://pypi.python.org/pypi/unittest2>`_"
msgstr ""

#: ../../writing/tests.rst:253
msgid "mock"
msgstr ""

#: ../../writing/tests.rst:255
msgid ""
":mod:`unittest.mock` is a library for testing in Python. As of Python "
"3.3, it is available in the `standard library "
"<https://docs.python.org/dev/library/unittest.mock>`_."
msgstr ""

#: ../../writing/tests.rst:259
msgid "For older versions of Python:"
msgstr ""

#: ../../writing/tests.rst:265
msgid ""
"It allows you to replace parts of your system under test with mock "
"objects and make assertions about how they have been used."
msgstr ""

#: ../../writing/tests.rst:268
msgid "For example, you can monkey-patch a method:"
msgstr ""

#: ../../writing/tests.rst:279
msgid ""
"To mock classes or objects in a module under test, use the ``patch`` "
"decorator. In the example below, an external search system is replaced "
"with a mock that always returns the same result (but only for the "
"duration of the test)."
msgstr ""

#: ../../writing/tests.rst:298
msgid "Mock has many other ways you can configure it and control its behavior."
msgstr ""

#: ../../writing/tests.rst:300
msgid "`mock <http://www.voidspace.org.uk/python/mock/>`_"
msgstr ""

