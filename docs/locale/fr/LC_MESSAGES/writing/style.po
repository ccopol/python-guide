# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016. A <a
# href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a>
# Project. <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC
# BY-NC-SA 3.0</a>
# This file is distributed under the same license as the pythonguide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-03 01:22+0200\n"
"PO-Revision-Date: 2016-07-16 21:39+0100\n"
"Last-Translator: Thomas Gratier <thomas.gratier@webgeodatavore.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Language: fr\n"
"X-Generator: Poedit 1.5.4\n"

#: ../../writing/style.rst:4
msgid "Code Style"
msgstr "Style de code"

#: ../../writing/style.rst:6
msgid ""
"If you ask Python programmers what they like most about Python, they will "
"often cite its high readability.  Indeed, a high level of readability is at "
"the heart of the design of the Python language, following the recognized "
"fact that code is read much more often than it is written."
msgstr ""
"Si vous demandez aux programmeurs Python ce qu'ils aiment le plus à propos "
"de Python, ils citeront souvent sa grande lisibilité. En effet, un haut "
"niveau de lisibilité est au cœur de la conception du langage Python, après "
"le fait reconnu que le code est lu beaucoup plus souvent que ce qui est "
"écrit."

#: ../../writing/style.rst:11
msgid ""
"One reason for the high readability of Python code is its relatively "
"complete set of Code Style guidelines and \"Pythonic\" idioms."
msgstr ""
"Une raison de la haute lisibilité du code Python est son jeu relativement "
"complet d'instructions de  style de code et ses idiomes \"Pythoniques\"."

#: ../../writing/style.rst:14
msgid ""
"When a veteran Python developer (a Pythonista) calls portions of code not "
"\"Pythonic\", they usually mean that these lines of code do not follow the "
"common guidelines and fail to express its intent in what is considered the "
"best (hear: most readable) way."
msgstr ""
"Quand un développeur Python vétéran (un Pythoniste) appelle des portions de "
"code non \"Pythoniques\", il veut dire généralement que ces lignes de code "
"ne suivent pas les instructions communes et ne parviennent pas à exprimer "
"leur intention dans ce qui est considéré comme la meilleure façon (entendez: "
"la manière la plus lisible)."

#: ../../writing/style.rst:19
msgid ""
"On some border cases, no best way has been agreed upon on how to express an "
"intent in Python code, but these cases are rare."
msgstr ""
"Dans certains cas limites, aucune meilleure pratique n'a été convenue sur la "
"façon d'exprimer une intention en code Python, mais ces cas sont rares."

#: ../../writing/style.rst:23
msgid "General concepts"
msgstr "Concepts généraux"

#: ../../writing/style.rst:26
msgid "Explicit code"
msgstr "Code explicite"

#: ../../writing/style.rst:28
msgid ""
"While any kind of black magic is possible with Python, the most explicit and "
"straightforward manner is preferred."
msgstr ""
"Alors que toute sorte de magie noire est possible avec Python, la manière la "
"plus explicite et directe est préférable."

#: ../../writing/style.rst:31 ../../writing/style.rst:58
msgid "**Bad**"
msgstr "**Mauvais**"

#: ../../writing/style.rst:39 ../../writing/style.rst:69
msgid "**Good**"
msgstr "**Bon**"

#: ../../writing/style.rst:46
msgid ""
"In the good code above, x and y are explicitly received from the caller, and "
"an explicit dictionary is returned. The developer using this function knows "
"exactly what to do by reading the first and last lines, which is not the "
"case with the bad example."
msgstr ""
"Dans le bon code ci-dessus, x et y sont explicitement reçus de l'appelant, "
"et un dictionnaire explicite est retourné. Le développeur utilisant cette "
"fonction sait exactement ce qu'il faut faire en lisant la première et la "
"dernière ligne, ce qui n'est pas le cas avec le mauvais exemple."

#: ../../writing/style.rst:52
msgid "One statement per line"
msgstr "Une déclaration par ligne"

#: ../../writing/style.rst:54
msgid ""
"While some compound statements such as list comprehensions are allowed and "
"appreciated for their brevity and their expressiveness, it is bad practice "
"to have two disjointed statements on the same line of code."
msgstr ""
"Bien que certaines déclarations composées comme les compréhensions de liste "
"soient autorisées et appréciées pour leur brièveté et leur expressivité, "
"c'est une mauvaise pratique d'avoir deux déclarations disjointes sur la même "
"ligne de code."

#: ../../writing/style.rst:85
msgid "Function arguments"
msgstr "Arguments de fonction"

#: ../../writing/style.rst:87
msgid "Arguments can be passed to functions in four different ways."
msgstr ""
"Les arguments peuvent être passés aux fonctions de quatre manières "
"différentes."

#: ../../writing/style.rst:89
msgid ""
"**Positional arguments** are mandatory and have no default values. They are "
"the simplest form of arguments and they can be used for the few function "
"arguments that are fully part of the function's meaning and their order is "
"natural. For instance, in ``send(message, recipient)`` or ``point(x, y)`` "
"the user of the function has no difficulty remembering that those two "
"functions require two arguments, and in which order."
msgstr ""
"**Les arguments positionnels** sont obligatoires et n'ont pas de valeurs par "
"défaut. Ils sont la forme la plus simple des arguments et ils peuvent être "
"utilisés pour les quelques arguments de fonction qui sont partie intégrante "
"de la signification de la fonction et leur ordre est naturel. Par exemple, "
"dans ``send(message, recipient)`` ou ``point(x, y)`` l'utilisateur de la "
"fonction n'a pas de difficulté à se souvenir que ces deux fonctions "
"nécessitent deux arguments, et dans quel ordre."

#: ../../writing/style.rst:96
msgid ""
"In those two cases, it is possible to use argument names when calling the "
"functions and, doing so, it is possible to switch the order of arguments, "
"calling for instance ``send(recipient='World', message='Hello')`` and "
"``point(y=2, x=1)`` but this reduces readability and is unnecessarily "
"verbose, compared to the more straightforward calls to ``send('Hello', "
"'World')`` and ``point(1, 2)``."
msgstr ""
"Dans ces deux cas, il est possible d'utiliser des noms d'argument lors de "
"l'appel des fonctions et, ce faisant, il est possible de changer l'ordre des "
"arguments, appelant par exemple ``send(recipient='World', message='Hello')`` "
"et ``point(y=2, x=1)``, mais cela réduit la lisibilité et est inutilement "
"verbeux, par rapport aux appels plus simples à ``send('Hello', 'World')`` et "
"``point(1, 2)``."

#: ../../writing/style.rst:103
msgid ""
"**Keyword arguments** are not mandatory and have default values. They are "
"often used for optional parameters sent to the function. When a function has "
"more than two or three positional parameters, its signature is more "
"difficult to remember and using keyword arguments with default values is "
"helpful. For instance, a more complete ``send`` function could be defined as "
"``send(message, to, cc=None, bcc=None)``. Here ``cc`` and ``bcc`` are "
"optional, and evaluate to ``None`` when they are not passed another value."
msgstr ""
"**Les arguments nommés** ne sont pas obligatoires et ont des valeurs par "
"défaut. Ils sont souvent utilisés pour les paramètres facultatifs envoyés à "
"la fonction. Quand une fonction a plus de deux ou trois paramètres "
"positionnels, sa signature est plus difficile à retenir et l'utilisation "
"d'arguments nommés avec des valeurs par défaut est utile. Par exemple, une "
"fonction ``send`` plus complète pourrait être définie comme ``send(message, "
"to, cc=None, bcc=None)``. Ici ``cc`` et ``bcc`` sont facultatifs, et sont "
"évalués à ``None`` quand ils ne reçoivent pas une autre valeur."

#: ../../writing/style.rst:111
msgid ""
"Calling a function with keyword arguments can be done in multiple ways in "
"Python, for example it is possible to follow the order of arguments in the "
"definition without explicitly naming the arguments, like in ``send('Hello', "
"'World', 'Cthulhu', 'God')``, sending a blind carbon copy to God. It would "
"also be possible to name arguments in another order, like in ``send('Hello "
"again', 'World', bcc='God', cc='Cthulhu')``. Those two possibilities are "
"better avoided without any strong reason to not follow the syntax that is "
"the closest to the function definition: ``send('Hello', 'World', "
"cc='Cthulhu', bcc='God')``."
msgstr ""
"L'appel d'une fonction avec des arguments nommés peut être fait de plusieurs "
"façons en Python. Par exemple, il est possible de suivre l'ordre des "
"arguments dans la définition sans nommer explicitement les arguments, comme "
"dans ``send('Hello', 'World', 'Cthulhu', 'God')``, envoyant une copie "
"carbone invisible à God. Il serait également possible de nommer des "
"arguments dans un autre ordre, comme dans ``send('Hello again', 'World', "
"bcc='God', cc='Cthulhu')``. Ces deux possibilités sont mieux évitées sans "
"aucune vraie raison de ne pas suivre la syntaxe qui est le plus proche de la "
"définition de la fonction: ``send('Hello', 'World', cc='Cthulhu', "
"bcc='God')``."

#: ../../writing/style.rst:121
msgid ""
"As a side note, following `YAGNI <http://en.wikipedia.org/wiki/"
"You_ain't_gonna_need_it>`_ principle, it is often harder to remove an "
"optional argument (and its logic inside the function) that was added \"just "
"in case\" and is seemingly never used, than to add a new optional argument "
"and its logic when needed."
msgstr ""
"Comme note à garder de côté, en suivant le principe `YAGNI <http://en."
"wikipedia.org/wiki/You_ain't_gonna_need_it>`_, il est souvent plus difficile "
"d'enlever un argument optionnel (et sa logique dans la fonction) qui a été "
"ajouté \"juste au cas où\" et n'est apparemment jamais utilisé, que "
"d'ajouter un nouvel argument optionnel et sa logique en cas de besoin."

#: ../../writing/style.rst:126
msgid "The **arbitrary argument list** is the third way to pass arguments to a function. If the function intention is better expressed by a signature with an extensible number of positional arguments, it can be defined with the ``*args`` constructs. In the function body, ``args`` will be a tuple of all the remaining positional arguments. For example, ``send(message, *args)`` can be called with each recipient as an argument:``send('Hello', 'God', 'Mom', 'Cthulhu')``, and in the function body ``args`` will be equal to ``('God', 'Mom', 'Cthulhu')``."
msgstr "La **liste d'arguments arbitraires** est la troisième façon de passer des "
"arguments à une fonction. Si l'intention de la fonction est mieux exprimée "
"par une signature avec un nombre extensible d'arguments positionnels, elle "
"peut être définie avec les constructions ``args``. Dans le corps de la "
"fonction, ``args`` sera un tuple de tous les arguments positionnels "
"restants. Par exemple, ``send(message, *args)`` peut être appelé avec chaque "
"destinataire comme argument: ``send('Hello', 'God', 'Mom', 'Cthulhu')``, et "
"dans le corps de la fonction ``args`` sera égal à ``('God', 'Mom', "
"'Cthulhu')``."

#: ../../writing/style.rst:135
msgid ""
"However, this construct has some drawbacks and should be used with caution. "
"If a function receives a list of arguments of the same nature, it is often "
"more clear to define it as a function of one argument, that argument being a "
"list or any sequence. Here, if ``send`` has multiple recipients, it is "
"better to define it explicitly: ``send(message, recipients)`` and call it "
"with ``send('Hello', ['God', 'Mom', 'Cthulhu'])``. This way, the user of the "
"function can manipulate the recipient list as a list beforehand, and it "
"opens the possibility to pass any sequence, including iterators, that cannot "
"be unpacked as other sequences."
msgstr ""
"Cependant, cette construction présente des inconvénients et doit être "
"utilisée avec prudence. Si une fonction reçoit une liste d'arguments de même "
"nature, il est souvent plus clair de la définir comme une fonction d'un seul "
"argument, cet argument étant une liste ou n'importe quelle séquence. Ici, si "
"``send`` a plusieurs destinataires, il est préférable de la définir "
"explicitement: ``send(message, recipients)`` et de l'appeler avec "
"``send('Hello', ['God', 'Mom', 'Cthulhu'])``. De cette façon, l'utilisateur "
"de la fonction peut manipuler la liste des destinataires sous forme de liste "
"à l'avance, et cela ouvre la possibilité de passer un ordre quelconque, y "
"compris les itérateurs, qui ne peuvent être unpacked comme d'autres "
"séquences."

#: ../../writing/style.rst:144
msgid ""
"The **arbitrary keyword argument dictionary** is the last way to pass "
"arguments to functions. If the function requires an undetermined series of "
"named arguments, it is possible to use the ``**kwargs`` construct. In the "
"function body, ``kwargs`` will be a dictionary of all the passed named "
"arguments that have not been caught by other keyword arguments in the "
"function signature."
msgstr ""
"Le **dictionnaire d'arguments mot-clé arbitraire** est le dernier moyen de "
"passer des arguments aux fonctions. Si la fonction nécessite une série "
"indéterminée d'arguments nommés, il est possible d'utiliser la construction "
"``**kwargs``. Dans le corps de la fonction, ``kwargs`` sera un dictionnaire "
"de tous les arguments nommés passés qui n'ont pas été récupérés par d'autres "
"arguments mot-clés dans la signature de la fonction."

#: ../../writing/style.rst:151
msgid ""
"The same caution as in the case of *arbitrary argument list* is necessary, "
"for similar reasons: these powerful techniques are to be used when there is "
"a proven necessity to use them, and they should not be used if the simpler "
"and clearer construct is sufficient to express the function's intention."
msgstr ""
"La même prudence que dans le cas de *liste d'arguments arbitraires* est "
"nécessaire, pour des raisons similaires: ces techniques puissantes doivent "
"être utilisés quand il y a une nécessité avérée de les utiliser, et elles ne "
"devraient pas être utilisées si la construction simple et plus claire est "
"suffisante pour exprimer l'intention de la fonction."

#: ../../writing/style.rst:156
msgid ""
"It is up to the programmer writing the function to determine which arguments "
"are positional arguments and which are optional keyword arguments, and to "
"decide whether to use the advanced techniques of arbitrary argument passing. "
"If the advice above is followed wisely, it is possible and enjoyable to "
"write Python functions that are:"
msgstr ""
"Il appartient au programmeur d'écrire la fonction pour déterminer quels "
"arguments sont des arguments positionnels et qui sont des arguments "
"optionnels mots-clés, et de décider d'utiliser ou non les techniques "
"avancées de passage d'arguments arbitraires. Si le conseil ci-dessus est "
"suivi à bon escient, il est possible et agréable d'écrire des fonctions "
"Python qui sont:"

#: ../../writing/style.rst:162
msgid "easy to read (the name and arguments need no explanations)"
msgstr ""
"faciles à lire (le nom et les arguments n'ont pas besoin d'explications)"

#: ../../writing/style.rst:164
msgid ""
"easy to change (adding a new keyword argument does not break other parts of "
"the code)"
msgstr ""
"faciles à changer (l'ajout d'un nouveau mot-clé en argument ne casse pas les "
"autres parties du code)"

#: ../../writing/style.rst:168
msgid "Avoid the magical wand"
msgstr "Éviter la baguette magique"

#: ../../writing/style.rst:170
msgid ""
"A powerful tool for hackers, Python comes with a very rich set of hooks and "
"tools allowing you to do almost any kind of tricky tricks. For instance, it "
"is possible to do each of the following:"
msgstr ""
"Un outil puissant pour les hackers, Python vient avec un jeu très riche de "
"hooks et d'outils vous permettant de faire presque tout sorte de trucs "
"délicats. Par exemple, il est possible de faire chacun des éléments suivants:"

#: ../../writing/style.rst:174
msgid "change how objects are created and instantiated"
msgstr "changer comment les objets sont créés et instanciés"

#: ../../writing/style.rst:176
msgid "change how the Python interpreter imports modules"
msgstr "changer comment l'interpréteur Python importe les modules"

#: ../../writing/style.rst:178
msgid ""
"it is even possible (and recommended if needed) to embed C routines in "
"Python."
msgstr ""
"il est même possible (et recommandé si nécessaire) pour intégrer des "
"routines C dans Python."

#: ../../writing/style.rst:180
msgid ""
"However, all these options have many drawbacks and it is always better to "
"use the most straightforward way to achieve your goal. The main drawback is "
"that readability suffers greatly when using these constructs. Many code "
"analysis tools, such as pylint or pyflakes, will be unable to parse this "
"\"magic\" code."
msgstr ""
"Cependant, toutes ces options présentent de nombreux inconvénients et il est "
"toujours préférable d'utiliser le moyen le plus simple pour atteindre votre "
"objectif. Le principal inconvénient est que la lisibilité souffre beaucoup "
"lors de l'utilisation de ces constructions. De nombreux outils d'analyse de "
"code, comme pylint ou pyflakes, ne pourront pas analyser ce code \"magique\"."

#: ../../writing/style.rst:185
msgid ""
"We consider that a Python developer should know about these nearly infinite "
"possibilities, because it instills confidence that no impassable problem "
"will be on the way. However, knowing how and particularly when **not** to "
"use them is very important."
msgstr ""
"Nous considérons qu'un développeur Python devrait connaître ces possibilités "
"presque infinies, car cela inspire la confiance qu'aucun problème "
"infranchissable ne sera sur le chemin. Cependant, savoir comment et surtout "
"quand  ne **pas** les utiliser est très important."

#: ../../writing/style.rst:190
msgid ""
"Like a kung fu master, a Pythonista knows how to kill with a single finger, "
"and never to actually do it."
msgstr ""
"Comme un maître de kung-fu, un Pythoniste sait comment tuer avec un seul "
"doigt, et ne jamais le faire pour de vrai."

#: ../../writing/style.rst:194
msgid "We are all responsible users"
msgstr "Nous sommes tous des utilisateurs responsables"

#: ../../writing/style.rst:196
msgid ""
"As seen above, Python allows many tricks, and some of them are potentially "
"dangerous. A good example is that any client code can override an object's "
"properties and methods: there is no \"private\" keyword in Python. This "
"philosophy, very different from highly defensive languages like Java, which "
"give a lot of mechanisms to prevent any misuse, is expressed by the saying: "
"\"We are all responsible users\"."
msgstr ""
"Comme on le voit ci-dessus, Python permet de nombreuses astuces, et certains "
"d'entre elles sont potentiellement dangereuses. Un bon exemple est que tout "
"code client peut surcharger les propriétés et les méthodes d'un objet: il "
"n'y a pas mot-clé \"private\" en Python. Cette philosophie, très différente "
"des langages très défensifs comme Java, qui donnent beaucoup de mécanismes "
"pour empêcher toute utilisation abusive, est exprimée par le dicton: \"Nous "
"sommes tous les utilisateurs responsables\"."

#: ../../writing/style.rst:203
msgid ""
"This doesn't mean that, for example, no properties are considered private, "
"and that no proper encapsulation is possible in Python. Rather, instead of "
"relying on concrete walls erected by the developers between their code and "
"other's, the Python community prefers to rely on a set of conventions "
"indicating that these elements should not be accessed directly."
msgstr ""
"Cela ne veut pas dire que, par exemple, que des propriétés ne sont pas "
"considérées comme privées, et qu'aucune encapsulation appropriée n'est "
"possible en Python. Au contraire, au lieu de compter sur les murs de béton "
"érigés par les développeurs entre leur code et les autres, la communauté "
"Python préfère compter sur un ensemble de conventions indiquant que ces "
"éléments ne doivent pas être directement accessibles."

#: ../../writing/style.rst:209
msgid ""
"The main convention for private properties and implementation details is to "
"prefix all \"internals\" with an underscore. If the client code breaks this "
"rule and accesses these marked elements, any misbehavior or problems "
"encountered if the code is modified is the responsibility of the client code."
msgstr ""
"La convention principale pour les propriétés privées et les détails "
"d'implémentation est de préfixer toutes les \"caractéristiques internes\" "
"avec un tiret bas. Si le code client enfreint cette règle et accède à ces "
"éléments marqués, tous les mauvais comportements ou problèmes rencontrés si "
"le code est modifié est de la responsabilité du code client."

#: ../../writing/style.rst:214
msgid ""
"Using this convention generously is encouraged: any method or property that "
"is not intended to be used by client code should be prefixed with an "
"underscore. This will guarantee a better separation of duties and easier "
"modification of existing code; it will always be possible to publicize a "
"private property, but making a public property private might be a much "
"harder operation."
msgstr ""
"L'utilisation de cette convention généreusement est encouragée: toute "
"méthode ou une propriété qui ne sont pas destinées à être utilisées par le "
"code client doivent être préfixées avec un tiret bas. Cela permettra de "
"garantir une meilleure séparation des tâches et une modification plus facile "
"du code existant; il sera toujours possible d'exposer une propriété privée, "
"mais rendre une propriété publique privée pourrait être une opération "
"beaucoup plus difficile."

#: ../../writing/style.rst:221
msgid "Returning values"
msgstr "Valeurs retournées"

#: ../../writing/style.rst:223
msgid ""
"When a function grows in complexity it is not uncommon to use multiple "
"return statements inside the function's body. However, in order to keep a "
"clear intent and a sustainable readability level, it is preferable to avoid "
"returning meaningful values from many output points in the body."
msgstr ""
"Quand une fonction croît en complexité, il n'est pas rare d'utiliser des "
"instructions de retour multiples à l'intérieur du corps de la fonction. "
"Cependant, afin de maintenir une intention claire et un niveau de lisibilité "
"durable, il est préférable d'éviter de retourner des valeurs significatives "
"à partir de nombreux points de sortie dans le corps."

#: ../../writing/style.rst:228
msgid ""
"There are two main cases for returning values in a function: the result of "
"the function return when it has been processed normally, and the error cases "
"that indicate a wrong input parameter or any other reason for the function "
"to not be able to complete its computation or task."
msgstr ""
"Il existe deux principaux cas pour retourner des valeurs dans une fonction: "
"le résultat du retour de la fonction quand il a été traité normalement, et "
"les cas d'erreur indiquant un paramètre d'entrée erroné ou toute autre "
"raison pour la fonction de ne pas être capable de compléter son calcul ou sa "
"tâche."

#: ../../writing/style.rst:233
msgid ""
"If you do not wish to raise exceptions for the second case, then returning a "
"value, such as None or False, indicating that the function could not perform "
"correctly might be needed. In this case, it is better to return as early as "
"the incorrect context has been detected. It will help to flatten the "
"structure of the function: all the code after the return-because-of-error "
"statement can assume the condition is met to further compute the function's "
"main result. Having multiple such return statements is often necessary."
msgstr ""
"Si vous ne souhaitez pas de lever des exceptions pour le second cas, puis "
"retourner une valeur, comme None ou False, indiquer que la fonction pourrait "
"ne pas fonctionner correctement pourrait être nécessaire. Dans ce cas, il "
"est préférable de la retourner aussitôt que le contexte incorrect a été "
"détecté. Cela aidera à aplatir la structure de la fonction: tout le code "
"après l'instruction retour-parce-que-erreur peut assumer que la condition "
"est remplie pour continuer à calculer le résultat principal de la fonction. "
"Avoir de telles multiples déclarations de retour est souvent nécessaire."

#: ../../writing/style.rst:241
msgid ""
"However, when a function has multiple main exit points for its normal "
"course, it becomes difficult to debug the returned result, so it may be "
"preferable to keep a single exit point. This will also help factoring out "
"some code paths, and the multiple exit points are a probable indication that "
"such a refactoring is needed."
msgstr ""
"Cependant, lorsqu'une fonction a plusieurs principaux points de sortie pour "
"son fonctionnement normal, il devient difficile de débugguer le résultat "
"retourné, donc il peut être préférable de garder un seul point de sortie. "
"Cela permettra également d'aider à refactoriser quelques chemins dans le "
"code, et les points de sortie multiples sont une indication probable qu'un "
"tel refactoring est nécessaire."

#: ../../writing/style.rst:262
msgid "Idioms"
msgstr "Idiomes"

#: ../../writing/style.rst:264
msgid ""
"A programming idiom, put simply, is a *way* to write code. The notion of "
"programming idioms is discussed amply at `c2 <http://c2.com/cgi/wiki?"
"ProgrammingIdiom>`_ and at `Stack Overflow <http://stackoverflow.com/"
"questions/302459/what-is-a-programming-idiom>`_."
msgstr ""
"Un idiome de langage, dit simplement, est un *moyen* d'écrire du code. La "
"notion d'idiomes de programmation est discutée amplement sur `c2 <http://c2."
"com/cgi/wiki?ProgrammingIdiom>`_ et sur `Stack Overflow <http://"
"stackoverflow.com/questions/302459/what-is-a-programming-idiom>`_."

#: ../../writing/style.rst:268
msgid "Idiomatic Python code is often referred to as being *Pythonic*."
msgstr ""
"Du code Python idiomatique est souvent désigné comme étant *Pythonique*."

#: ../../writing/style.rst:270
msgid ""
"Although there usually is one --- and preferably only one --- obvious way to "
"do it; *the* way to write idiomatic Python code can be non-obvious to Python "
"beginners. So, good idioms must be consciously acquired."
msgstr ""
"Bien qu'il y ait habituellement une --- et de préférence une seule --- "
"manière évidente de le faire; *la* façon d'écrire du code Python idiomatique "
"peut être non évidente pour les débutants Python. Donc, les bons idiomes "
"doivent être consciemment acquis."

#: ../../writing/style.rst:274
msgid "Some common Python idioms follow:"
msgstr "Certains idiomes Python communs suivent:"

#: ../../writing/style.rst:279
msgid "Unpacking"
msgstr "Unpacking"

#: ../../writing/style.rst:281
msgid ""
"If you know the length of a list or tuple, you can assign names to its "
"elements with unpacking. For example, since ``enumerate()`` will provide a "
"tuple of two elements for each item in list:"
msgstr ""
"Si vous connaissez la longueur d'une liste ou d'un tuple, vous pouvez "
"attribuer des noms à ses éléments avec l'unpacking. Par exemple, étant donné "
"que ``enumerate()`` fournira un tuple de deux éléments pour chaque élément "
"dans la liste:"

#: ../../writing/style.rst:290
msgid "You can use this to swap variables as well:"
msgstr "Vous pouvez l'utiliser pour intervertir des variables ainsi:"

#: ../../writing/style.rst:296
msgid "Nested unpacking works too:"
msgstr "L'unpacking imbriqué marche aussi:"

#: ../../writing/style.rst:302
msgid ""
"In Python 3, a new method of extended unpacking was introduced by :pep:"
"`3132`:"
msgstr ""
"En Python 3, une nouvelle méthode d'unpacking étendue a été introduite par "
"la :pep:`3132`:"

#: ../../writing/style.rst:313
msgid "Create an ignored variable"
msgstr "Créer une variable ignorée"

#: ../../writing/style.rst:315
msgid ""
"If you need to assign something (for instance, in :ref:`unpacking-ref`) but "
"will not need that variable, use ``__``:"
msgstr ""
"Si vous avez besoin d'assigner quelque chose (par exemple, dans :ref:"
"`unpacking-ref`) mais que vous n'avez pas besoin de cette variable, utilisez "
"``__``:"

#: ../../writing/style.rst:325
msgid ""
"Many Python style guides recommend the use of a single underscore \"``_``\" "
"for throwaway variables rather than the double underscore \"``__``\" "
"recommended here. The issue is that \"``_``\" is commonly used as an alias "
"for the :func:`~gettext.gettext` function, and is also used at the "
"interactive prompt to hold the value of the last operation. Using a double "
"underscore instead is just as clear and almost as convenient, and eliminates "
"the risk of accidentally interfering with either of these other use cases."
msgstr ""
"Beaucoup de guides de style Python recommandent l'utilisation d'un seul "
"tiret bas \"``_``\" pour les variables jetables plutôt que les tirets bas "
"doubles \"``__``\" recommandés ici. Le problème est que \"``_``\" est "
"couramment utilisé comme un alias pour la fonction :func:`~gettext.gettext`, "
"et est également utilisé dans l'invite interactive pour garder la valeur de "
"la dernière opération. L'utilisation d'un tiret bas double est à la place "
"est tout aussi clair et presque aussi pratique, et élimine le risque "
"d'interférer accidentellement avec l'un de ces autres cas d'utilisation."

#: ../../writing/style.rst:335
msgid "Create a length-N list of the same thing"
msgstr "Créer un liste de longueur N de la même chose"

#: ../../writing/style.rst:337
msgid "Use the Python list ``*`` operator:"
msgstr "Utilisez l'opérateur de liste ``*`` de Python:"

#: ../../writing/style.rst:344
msgid "Create a length-N list of lists"
msgstr "Créez un liste de longueur N de listes"

#: ../../writing/style.rst:346
msgid ""
"Because lists are mutable, the ``*`` operator (as above) will create a list "
"of N references to the `same` list, which is not likely what you want. "
"Instead, use a list comprehension:"
msgstr ""
"parce que les listes sont mutables, l'opérateur ``*`` (comme ci-dessus) "
"créera une liste de N références vers la `même` liste, ce qui est "
"probablement pas ce que vous voulez. A la place, utilisez une compréhension "
"de liste:"

#: ../../writing/style.rst:354
msgid "Note: Use range() instead of xrange() in Python 3"
msgstr "Note: utilisez range() à la place de xrange() en Python 3"

#: ../../writing/style.rst:357
msgid "Create a string from a list"
msgstr "Créer une chaîne depuis une liste"

#: ../../writing/style.rst:359
msgid ""
"A common idiom for creating strings is to use :py:meth:`str.join` on an "
"empty string."
msgstr ""
"Un idiome commun pour la création de chaînes est d'utiliser :py:meth:`str."
"join` sur une chaîne vide."

#: ../../writing/style.rst:367
msgid ""
"This will set the value of the variable *word* to 'spam'. This idiom can be "
"applied to lists and tuples."
msgstr ""
"Cela va définir la valeur de la variable *word* à 'spam'. Cet idiome peut "
"être appliqué à des listes et des tuples."

#: ../../writing/style.rst:371
msgid "Searching for an item in a collection"
msgstr "Rechercher un élément dans une collection"

#: ../../writing/style.rst:373
msgid ""
"Sometimes we need to search through a collection of things. Let's look at "
"two options: lists and sets."
msgstr ""
"Parfois, nous devons chercher à travers une collection de choses. Regardons "
"deux options: lists et sets."

#: ../../writing/style.rst:376
msgid "Take the following code for example:"
msgstr "Prenez le code suivant pour exemple:"

#: ../../writing/style.rst:389
msgid ""
"Even though both functions look identical, because *lookup_set* is utilizing "
"the fact that sets in Python are hashtables, the lookup performance between "
"the two is very different. To determine whether an item is in a list, Python "
"will have to go through each item until it finds a matching item. This is "
"time consuming, especially for long lists. In a set, on the other hand, the "
"hash of the item will tell Python where in the set to look for a matching "
"item. As a result, the search can be done quickly, even if the set is large. "
"Searching in dictionaries works the same way. For more information see this "
"`StackOverflow <http://stackoverflow.com/questions/513882/python-list-vs-"
"dict-for-look-up-table>`_ page. For detailed information on the amount of "
"time various common operations take on each of these data structures, see "
"`this page <https://wiki.python.org/moin/TimeComplexity?>`_."
msgstr ""
"Même si les deux fonctions semblent identiques, parce que *lookup_set* "
"utilise le fait que les sets en Python sont des tables de hashage, les "
"performances de recherche entre les deux sont très différentes. Pour "
"déterminer si un élément se trouve dans une liste, Python devra parcourir "
"chaque élément jusqu'à ce qu'il trouve un élément correspondant. Cela prend "
"du temps, surtout pour de longues listes. Dans un set, d'autre part, le "
"hachage de l'élément dira à Python où dans le set chercher un élément "
"correspondant. En conséquence, la recherche peut être faite rapidement, même "
"si le set est grand. La recherche dans les dictionnaires fonctionne de la "
"même façon. Pour plus d'informations, voir cette page `StackOverflow <http://"
"stackoverflow.com/questions/513882/python-list-vs-dict-for-look-up-table>`_. "
"Pour plus d'informations sur la quantité de temps nécessaire pour les "
"différentes opérations courantes pour chacune de ces structures de données, "
"voir `cette page <https://wiki.python.org/moin/TimeComplexity?>`_."

#: ../../writing/style.rst:403
msgid ""
"Because of these differences in performance, it is often a good idea to use "
"sets or dictionaries instead of lists in cases where:"
msgstr ""
"En raison de ces différences de performance, c'est souvent une bonne idée "
"d'utiliser des sets ou des dictionnaires au lieu de listes dans les cas où:"

#: ../../writing/style.rst:406
msgid "The collection will contain a large number of items"
msgstr "La collection contiendra un grand nombre d'éléments"

#: ../../writing/style.rst:408
msgid "You will be repeatedly searching for items in the collection"
msgstr ""
"Vous rechercherez de manière répétitive les éléments dans la collection"

#: ../../writing/style.rst:410
msgid "You do not have duplicate items."
msgstr "Vous n'avez pas pas d'éléments dupliqués."

#: ../../writing/style.rst:412
msgid ""
"For small collections, or collections which you will not frequently be "
"searching through, the additional time and memory required to set up the "
"hashtable will often be greater than the time saved by the improved search "
"speed."
msgstr ""
"Pour les petites collections, ou les collections que vous n'avez pas "
"fréquemment à rechercher, le temps additionnel et la mémoire requise pour "
"configurer la table de hashage seront souvent plus longs que le temps gagné "
"grâce à l'amélioration de la vitesse de recherche."

#: ../../writing/style.rst:419
msgid "Zen of Python"
msgstr "Le Zen de Python"

#: ../../writing/style.rst:421
msgid "Also known as :pep:`20`, the guiding principles for Python's design."
msgstr ""
"Aussi connu comme :pep:`20`, les principes directeurs pour la conception de "
"Python."

#: ../../writing/style.rst:448
msgid ""
"For some examples of good Python style, see `these slides from a Python user "
"group <http://artifex.org/~hblanks/talks/2011/pep20_by_example.pdf>`_."
msgstr ""
"Pour quelques exemples de bons styles Python, voir `ces diapositives d'un "
"groupe d'utilisateurs Python <http://artifex.org/~hblanks/talks/2011/"
"pep20_by_example.pdf>`_."

#: ../../writing/style.rst:452
msgid "PEP 8"
msgstr "PEP 8"

#: ../../writing/style.rst:454
msgid ""
":pep:`8` is the de-facto code style guide for Python. A high quality, easy-"
"to-read version of PEP 8 is also available at `pep8.org <http://pep8.org/>`_."
msgstr ""
":pep:`8` est le guide de fait du style de code pour Python. Une version de "
"haute qualité, facile à lire de la PEP 8 est également disponible sur `pep8."
"org <http://pep8.org/>`_."

#: ../../writing/style.rst:457
msgid ""
"This is highly recommended reading. The entire Python community does their "
"best to adhere to the guidelines laid out within this document. Some project "
"may sway from it from time to time, while others may `amend its "
"recommendations <http://docs.python-requests.org/en/master/dev/contributing/"
"#kenneth-reitz-s-code-style>`_."
msgstr ""
"C'est une lecture fortement recommandée. La communauté Python entière fait "
"de son mieux pour adhérer aux instructions énoncées dans le présent "
"document. Certains projets peuvent osciller autour d'elles de temps à autre, "
"tandis que d'autres peuvent `modifier ses recommandations <http://docs."
"python-requests.org/en/master/dev/contributing/#kenneth-reitz-s-code-"
"style>`_."

#: ../../writing/style.rst:462
msgid ""
"That being said, conforming your Python code to PEP 8 is generally a good "
"idea and helps make code more consistent when working on projects with other "
"developers. There is a command-line program, `pep8 <https://github.com/"
"jcrocholl/pep8>`_, that can check your code for conformance. Install it by "
"running the following command in your terminal:"
msgstr ""
"Cela étant dit, conformer votre code Python à PEP 8 est généralement une "
"bonne idée et contribue à rendre le code plus consistant lorsque vous "
"travaillez sur des projets avec d'autres développeurs. Il existe un "
"programme en ligne de commande, `pep8 <https://github.com/jcrocholl/pep8>`_, "
"qui peut vérifier la conformité de votre code. Installez-le en exécutant la "
"commande suivante dans votre terminal:"

#: ../../writing/style.rst:474
msgid ""
"Then run it on a file or series of files to get a report of any violations."
msgstr ""
"Ensuite, exécutez-le sur un fichier ou une série de fichiers pour avoir un "
"rapport de toutes violations."

#: ../../writing/style.rst:488
msgid ""
"The program `autopep8 <https://pypi.python.org/pypi/autopep8/>`_ can be used "
"to automatically reformat code in the PEP 8 style. Install the program with:"
msgstr ""
"Le programme `autopep8 <https://pypi.python.org/pypi/autopep8/>`_ peut être "
"utilisé pour reformater automatiquement le code dans le style PEP 8. "
"Installez le programme avec:"

#: ../../writing/style.rst:495
msgid "Use it to format a file in-place with:"
msgstr "Utilisez-le pour formater un fichier sur place avec:"

#: ../../writing/style.rst:501
msgid ""
"Excluding the ``--in-place`` flag will cause the program to output the "
"modified code directly to the console for review. The ``--aggressive`` flag "
"will perform more substantial changes and can be applied multiple times for "
"greater effect."
msgstr ""
"Exclure l'option ``--in-place`` va mener le programme à renvoyer en sortie "
"le code modifié directement dans la console pour examen. L'option ``--"
"aggressive`` effectuera des changements plus importants et peut être "
"appliquée à plusieurs reprises pour plus d'effet."

#: ../../writing/style.rst:506
msgid "Conventions"
msgstr "Conventions"

#: ../../writing/style.rst:508
msgid ""
"Here are some conventions you should follow to make your code easier to read."
msgstr ""
"Voici quelques conventions que vous devriez suivre pour rendre votre code "
"plus facile à lire."

#: ../../writing/style.rst:511
msgid "Check if variable equals a constant"
msgstr "Vérifier sir la variable est égale à une constante"

#: ../../writing/style.rst:513
msgid ""
"You don't need to explicitly compare a value to True, or None, or 0 - you "
"can just add it to the if statement. See `Truth Value Testing <http://docs."
"python.org/library/stdtypes.html#truth-value-testing>`_ for a list of what "
"is considered false."
msgstr ""
"Vous n'avez pas besoin de comparer explicitement une valeur à True ou None, "
"ou 0 - vous pouvez simplement l'ajouter à l'instruction if. Voir le `Test "
"des valeurs à True <http://docs.python.org/library/stdtypes.html#truth-value-"
"testing>`_ pour une liste de ce qui est considéré comme False."

#: ../../writing/style.rst:518 ../../writing/style.rst:550
#: ../../writing/style.rst:582 ../../writing/style.rst:602
#: ../../writing/style.rst:641 ../../writing/style.rst:676
msgid "**Bad**:"
msgstr "**Mauvais**:"

#: ../../writing/style.rst:528 ../../writing/style.rst:560
#: ../../writing/style.rst:593 ../../writing/style.rst:611
#: ../../writing/style.rst:650 ../../writing/style.rst:687
msgid "**Good**:"
msgstr "**Bon**:"

#: ../../writing/style.rst:545
msgid "Access a Dictionary Element"
msgstr "Accéder à un élément de dictionnaire"

#: ../../writing/style.rst:547
msgid ""
"Don't use the :py:meth:`dict.has_key` method. Instead, use ``x in d`` "
"syntax, or pass a default argument to :py:meth:`dict.get`."
msgstr ""
"N'utilisez pas la méthode :py:meth:`dict.has_key`. A la place,utilisez la "
"syntaxe ``x in d``, ou passez un argument par défaut à :py:meth:`dict.get`."

#: ../../writing/style.rst:574
msgid "Short Ways to Manipulate Lists"
msgstr "Façons courtes de manipuler des listes"

#: ../../writing/style.rst:576
msgid ""
"`List comprehensions <http://docs.python.org/tutorial/datastructures."
"html#list-comprehensions>`_ provide a powerful, concise way to work with "
"lists. Also, the :py:func:`map` and :py:func:`filter` functions can perform "
"operations on lists using a different, more concise syntax."
msgstr ""
"`Les listes en compréhensions <http://docs.python.org/tutorial/"
"datastructures.html#list-comprehensions>`_ fournissent un manière puissante "
"et concise de travailler avec les listes. En outre, les fonctions :py:func:"
"`map` et :py:func:`filter` peuvent effectuer des opérations sur des listes "
"en utilisant une syntaxe différente et plus concise."

#: ../../writing/style.rst:620
msgid "Use :py:func:`enumerate` keep a count of your place in the list."
msgstr ""
"Utilisez :py:func:`enumerate` tient un compte de votre position dans la "
"liste."

#: ../../writing/style.rst:632
msgid ""
"The :py:func:`enumerate` function has better readability than handling a "
"counter manually. Moreover, it is better optimized for iterators."
msgstr ""
"La fonction :py:func:`enumerate` a une meilleure lisibilité que la gestion "
"d'un compteur manuellement. De plus, elle est plus optimisés pour les "
"itérateurs."

#: ../../writing/style.rst:636
msgid "Read From a File"
msgstr "Lire depuis un fichier"

#: ../../writing/style.rst:638
msgid ""
"Use the ``with open`` syntax to read from files. This will automatically "
"close files for you."
msgstr ""
"Utilisez la syntaxe ``with open`` pour lire depuis des fichiers. Cela "
"fermera automatiquement les fichiers pour vous."

#: ../../writing/style.rst:658
msgid ""
"The ``with`` statement is better because it will ensure you always close the "
"file, even if an exception is raised inside the ``with`` block."
msgstr ""
"La déclaration ``with`` est meilleure parce qu'elle assure que vous fermez "
"toujours le fichier, même si une exception est levée à l'intérieur du block "
"``with``."

#: ../../writing/style.rst:662
msgid "Line Continuations"
msgstr "Continuations de ligne"

#: ../../writing/style.rst:664
msgid ""
"When a logical line of code is longer than the accepted limit, you need to "
"split it over multiple physical lines. The Python interpreter will join "
"consecutive lines if the last character of the line is a backslash. This is "
"helpful in some cases, but should usually be avoided because of its "
"fragility: a white space added to the end of the line, after the backslash, "
"will break the code and may have unexpected results."
msgstr ""
"Quand une ligne logique de code est plus longue que la limite acceptée, vous "
"devez la diviser sur plusieurs lignes physiques. L'interpréteur Python "
"rejoindra lignes consécutives si le dernier caractère de la ligne est une "
"barre oblique inverse. Ceci est utile dans certains cas, mais doit "
"généralement être évitée en raison de sa fragilité: un espace blanc ajouté à "
"la fin de la ligne, après la barre oblique inverse, va casser le code et "
"peut avoir des résultats inattendus."

#: ../../writing/style.rst:671
msgid ""
"A better solution is to use parentheses around your elements. Left with an "
"unclosed parenthesis on an end-of-line the Python interpreter will join the "
"next line until the parentheses are closed. The same behavior holds for "
"curly and square braces."
msgstr ""
"Une meilleure solution est d'utiliser des parenthèses autour de vos "
"éléments. Avec une parenthèse non fermée laissée à la fin d'une ligne, "
"l'interpréteur Python joindra la ligne suivante jusqu'à ce que les "
"parenthèses soient fermées. Le même comportement est valable pour des "
"accolades et des crochets."

#: ../../writing/style.rst:700
msgid ""
"However, more often than not, having to split a long logical line is a sign "
"that you are trying to do too many things at the same time, which may hinder "
"readability."
msgstr ""
"Cependant, le plus souvent, avoir à couper une longue ligne logique est un "
"signe que vous essayez de faire trop de choses en même temps, ce qui peut "
"gêner la lisibilité."
