# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016. A <a
# href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a>
# Project. <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC
# BY-NC-SA 3.0</a>
# This file is distributed under the same license as the pythonguide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-03 01:22+0200\n"
"PO-Revision-Date: 2016-07-14 19:56+0100\n"
"Last-Translator: Thomas Gratier <thomas.gratier@webgeodatavore.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"X-Generator: Poedit 1.5.4\n"
"Language: fr\n"

#: ../../writing/gotchas.rst:2
msgid "Common Gotchas"
msgstr "Pièges communs"

#: ../../writing/gotchas.rst:4
msgid ""
"For the most part, Python aims to be a clean and consistent language that "
"avoids surprises. However, there are a few cases that can be confusing to "
"newcomers."
msgstr ""
"Pour la plus grande partie, Python vise à être un langage propre et cohérent "
"qui permet d'éviter des surprises. Cependant, il y a quelques cas qui "
"peuvent être sources de confusion pour les nouveaux arrivants."

#: ../../writing/gotchas.rst:8
msgid ""
"Some of these cases are intentional but can be potentially surprising. Some "
"could arguably be considered language warts. In general, what follows is a "
"collection of potentially tricky behavior that might seem strange at first "
"glance, but is generally sensible once you're aware of the underlying cause "
"for the surprise."
msgstr ""
"Certains de ces cas sont intentionnels, mais peuvent être potentiellement "
"surprenants. Certains pourraient sans doute être considérés comme des "
"verrues du langage. En général, ce qui suit est une collection de "
"comportements potentiellement délicats qui pourraient sembler étranges à "
"première vue, mais qui sont généralement raisonnables une fois que vous êtes "
"au courant de la cause sous-jacente de cette surprise."

#: ../../writing/gotchas.rst:18
msgid "Mutable Default Arguments"
msgstr "Arguments par défaut mutables"

#: ../../writing/gotchas.rst:20
msgid ""
"Seemingly the *most* common surprise new Python programmers encounter is "
"Python's treatment of mutable default arguments in function definitions."
msgstr ""
"Apparemment la surprise  *la plus* commune que les nouveaux programmeurs "
"Python rencontre est le traitement Python des arguments par défaut mutables "
"dans les définitions de fonction."

#: ../../writing/gotchas.rst:24 ../../writing/gotchas.rst:95
msgid "What You Wrote"
msgstr "Ce que vous écrivez"

#: ../../writing/gotchas.rst:33 ../../writing/gotchas.rst:103
msgid "What You Might Have Expected to Happen"
msgstr "Qu'est-ce que vous auriez pu attendre qu'il se passe"

#: ../../writing/gotchas.rst:43
msgid ""
"A new list is created each time the function is called if a second argument "
"isn't provided, so that the output is::"
msgstr ""
"Une nouvelle liste est créée chaque fois que la fonction est appelée si un "
"second argument n'est pas fourni, de sorte que la sortie est::"

#: ../../writing/gotchas.rst:50 ../../writing/gotchas.rst:120
msgid "What Does Happen"
msgstr "Ce qui se passe"

#: ../../writing/gotchas.rst:57
msgid ""
"A new list is created *once* when the function is defined, and the same list "
"is used in each successive call."
msgstr ""
"Une nouvelle liste est créée *une seule fois* quand la fonction est définie, "
"et la même liste est utilisée dans chaque appel successif."

#: ../../writing/gotchas.rst:60
msgid ""
"Python's default arguments are evaluated *once* when the function is "
"defined, not each time the function is called (like it is in say, Ruby). "
"This means that if you use a mutable default argument and mutate it, you "
"*will* and have mutated that object for all future calls to the function as "
"well."
msgstr ""
"Les arguments par défaut de Python sont évalués *une seule fois* lorsque la "
"fonction est définie, pas chaque fois que la fonction est appelée (comme "
"c'est le cas, disons en Ruby). Cela signifie que si vous utilisez un "
"argument par défaut mutable et le mutez, vous *aurez* muté l'argument ici et "
"pour tous les futurs appels à la fonction aussi."

#: ../../writing/gotchas.rst:66 ../../writing/gotchas.rst:159
msgid "What You Should Do Instead"
msgstr "Ce que vous devriez faire à la place"

#: ../../writing/gotchas.rst:68
msgid ""
"Create a new object each time the function is called, by using a default arg "
"to signal that no argument was provided (:py:data:`None` is often a good "
"choice)."
msgstr ""
"Créez un nouvel objet à chaque fois que la fonction est appelée, en "
"utilisant un argument par défaut pour signaler que aucun argument n'a été "
"fourni (:py:data:`None`  est souvent un bon choix)."

#: ../../writing/gotchas.rst:81 ../../writing/gotchas.rst:182
msgid "When the Gotcha Isn't a Gotcha"
msgstr "Quand le piège n'est pas un piège"

#: ../../writing/gotchas.rst:83
msgid ""
"Sometimes you can specifically \"exploit\" (read: use as intended) this "
"behavior to maintain state between calls of a function. This is often done "
"when writing a caching function."
msgstr ""
"Parfois, vous pouvez spécifiquement \"exploiter\" (lisez: utilisé comme "
"prévu) ce comportement pour maintenir l'état entre les appels d'une "
"fonction. C'est souvent fait lors de l'écriture d'une fonction de mise en "
"cache."

#: ../../writing/gotchas.rst:89
msgid "Late Binding Closures"
msgstr "Closures des bindings tardives"

#: ../../writing/gotchas.rst:91
msgid ""
"Another common source of confusion is the way Python binds its variables in "
"closures (or in the surrounding global scope)."
msgstr ""
"Une autre source de confusion est la manière dont Python bind ses variables "
"dans les closures (ou dans la portée globale entourante)"

#: ../../writing/gotchas.rst:110
msgid ""
"A list containing five functions that each have their own closed-over ``i`` "
"variable that multiplies their argument, producing::"
msgstr ""
"Une liste contenant cinq fonctions qui ont chacun leur propre variable ``i`` "
"fermée sur elle-même qui multiplie leur argument, produisant::"

#: ../../writing/gotchas.rst:130
msgid ""
"Five functions are created; instead all of them just multiply ``x`` by 4."
msgstr ""
"Cinq fonctions sont créées; au lieu que toutes ne multiplient juste ``x`` "
"par 4."

#: ../../writing/gotchas.rst:132
msgid ""
"Python's closures are *late binding*. This means that the values of "
"variables used in closures are looked up at the time the inner function is "
"called."
msgstr ""
"Les closures de Python sont des *late binding*. Cela signifie que les "
"valeurs des variables utilisées dans les closures sont regardées au moment "
"où la fonction interne est appelée."

#: ../../writing/gotchas.rst:136
msgid ""
"Here, whenever *any* of the returned functions are called, the value of "
"``i`` is looked up in the surrounding scope at call time. By then, the loop "
"has completed and ``i`` is left with its final value of 4."
msgstr ""
"Ici, chaque fois que *n'importe lesquelles* des fonctions retournées sont "
"appelées, la valeur de ``i`` est recherché dans la portée environnante au "
"moment de l'appel. D'ici là, la boucle est terminée et ``i`` est laissé à sa "
"valeur finale de 4."

#: ../../writing/gotchas.rst:140
msgid ""
"What's particularly nasty about this gotcha is the seemingly prevalent "
"misinformation that this has something to do with :ref:`lambdas <python:"
"lambda>` in Python. Functions created with a ``lambda`` expression are in no "
"way special, and in fact the same exact behavior is exhibited by just using "
"an ordinary ``def``:"
msgstr ""
"Ce qui est particulièrement déplaisant sur ce piège est la désinformation "
"apparemment répandue que cela a quelque chose à voir avec les :ref:`lambdas "
"<python:lambda>` en Python. Les fonctions créées avec une expression "
"``lambda`` ne sont en aucune façon particulière, et en fait le même "
"comportement est exposé en utilisant simplement un ordinaire ``def``:"

#: ../../writing/gotchas.rst:161
msgid ""
"The most general solution is arguably a bit of a hack. Due to Python's "
"aforementioned behavior concerning evaluating default arguments to functions "
"(see :ref:`default_args`), you can create a closure that binds immediately "
"to its arguments by using a default arg like so:"
msgstr ""
"La solution la plus générale est sans doute une forme de hack. En raison du "
"comportement de Python déjà mentionné concernant l'évaluation des arguments "
"par défaut aux fonctions (voir :ref:`default_args`), vous pouvez créer une "
"closure qui se bind immédiatement à ses arguments en utilisant un argument "
"par défaut comme ceci:"

#: ../../writing/gotchas.rst:171
msgid "Alternatively, you can use the functools.partial function:"
msgstr "Alternativement, vous pouvez utiliser la fonction functools.partial:"

#: ../../writing/gotchas.rst:184
msgid ""
"Sometimes you want your closures to behave this way. Late binding is good in "
"lots of situations. Looping to create unique functions is unfortunately a "
"case where they can cause hiccups."
msgstr ""
"Parfois, vous voulez que vos closures se comportent de cette façon. Les late "
"binding sont biens dans beaucoup de situations. Boucler pour créer des "
"fonctions uniques est malheureusement un cas où ils peuvent causer le hoquet."

#: ../../writing/gotchas.rst:191
msgid "Bytecode (.pyc) Files Everywhere!"
msgstr "Fichiers Bytecode (.pyc) partout!"

#: ../../writing/gotchas.rst:193
msgid ""
"By default, when executing Python code from files, the Python interpreter "
"will automatically write a bytecode version of that file to disk, e.g. "
"``module.pyc``."
msgstr ""
"Par défaut, lors de l'exécution du code Python à partir de fichiers, "
"l'interpréteur Python va automatiquement écrire une version bytecode de ce "
"fichier sur le disque, par exemple ``module.pyc``."

#: ../../writing/gotchas.rst:197
msgid ""
"These ``.pyc`` files should not be checked into your source code "
"repositories."
msgstr ""
"Ces fichiers ``.pyc`` ne doivent pas être versionnés dans vos dépôts de code "
"source."

#: ../../writing/gotchas.rst:199
msgid ""
"Theoretically, this behavior is on by default, for performance reasons. "
"Without these bytecode files present, Python would re-generate the bytecode "
"every time the file is loaded."
msgstr ""
"Théoriquement, ce comportement est activé par défaut, pour des raisons de "
"performance. Sans ces fichiers bytecode présents, Python regénérerait le "
"bytecode chaque fois que le fichier est chargé."

#: ../../writing/gotchas.rst:205
msgid "Disabling Bytecode (.pyc) Files"
msgstr "Désactiver les fichiers Bytecode (.pyc)"

#: ../../writing/gotchas.rst:207
msgid ""
"Luckily, the process of generating the bytecode is extremely fast, and isn't "
"something you need to worry about while developing your code."
msgstr ""
"Heureusement, le processus de génération du bytecode est extrêmement rapide, "
"et n'est pas quelque chose dont vous avez besoin de vous soucier quand vous "
"développez votre code."

#: ../../writing/gotchas.rst:210
msgid "Those files are annoying, so let's get rid of them!"
msgstr "Ces fichiers sont ennuyeux, débarrassons-nous d'eux!"

#: ../../writing/gotchas.rst:216
msgid ""
"With the ``$PYTHONDONTWRITEBYTECODE`` environment variable set, Python will "
"no longer write these files to disk, and your development environment will "
"remain nice and clean."
msgstr ""
"Avec la variable d'environnement ``$PYTHONDONTWRITEBYTECODE`` définie, "
"Python n'écrira pas plus longtemps ces fichiers sur le disque, et votre "
"environnement de développement restera agréable et propre."

#: ../../writing/gotchas.rst:220
msgid "I recommend setting this environment variable in your ``~/.profile``."
msgstr ""
"Je recommande la définition de cette variable d'environnement dans votre "
"``~/.profile``."

#: ../../writing/gotchas.rst:223
msgid "Removing Bytecode (.pyc) Files"
msgstr "Enlever les fichiers Bytecode (.pyc)"

#: ../../writing/gotchas.rst:225
msgid ""
"Here's nice trick for removing all of these files, if they already exist::"
msgstr ""
"Voici une astuce sympathique pour enlever tous ces fichiers, s'ils existent "
"déjà::"

#: ../../writing/gotchas.rst:229
msgid ""
"Run that from the root directory of your project, and all ``.pyc`` files "
"will suddenly vanish. Much better."
msgstr ""
"Exécutez ceci depuis le répertoire racine de votre projet, et tous les "
"fichiers ``.pyc`` vont soudainement disparaître. Beaucoup mieux."
