# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016. A <a
# href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a>
# Project. <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC
# BY-NC-SA 3.0</a>
# This file is distributed under the same license as the pythonguide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-03 01:22+0200\n"
"PO-Revision-Date: 2016-07-16 02:02+0100\n"
"Last-Translator: Thomas Gratier <thomas.gratier@webgeodatavore.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"X-Generator: Poedit 1.5.4\n"
"Language: fr\n"

#: ../../writing/structure.rst:2
msgid "Structuring Your Project"
msgstr "Structurer votre projet"

#: ../../writing/structure.rst:4
msgid ""
"By \"structure\" we mean the decisions you make concerning how your project "
"best meets its objective. We need to consider how to best leverage Python's "
"features to create clean, effective code. In practical terms, \"structure\" "
"means making clean code whose logic and dependencies are clear as well as "
"how the files and folders are organized in the filesystem."
msgstr ""
"Par \"structurer\" nous entendons les décisions que vous faites concernant "
"comment votre projet atteint au mieux son objectif. Nous avons besoin de "
"considérer comment exploiter au mieux les fonctionnalités de Python pour "
"créer un code propre et efficace. En termes pratiques, \"structurer\" "
"signifie produire du code propre dont la logique et les dépendances sont "
"claires ainsi que la façon dont les fichiers et dossiers sont organisés dans "
"le système de  fichiers."

#: ../../writing/structure.rst:11
msgid ""
"Which functions should go into which modules? How does data flow through the "
"project? What features and functions can be grouped together and isolated? "
"By answering questions like these you can begin to plan, in a broad sense, "
"what your finished product will look like."
msgstr ""
"Quelle fonctions doivent aller dans quels modules? Comment circule la donnée "
"dans le projet? Quelles fonctionnalités et fonctions peuvent être groupées "
"ensemble et isolées? En répondant à des questions comme cela, vous pouvez "
"commencer à planifier, au sens large, ce à quoi votre produit fini "
"ressemblera."

#: ../../writing/structure.rst:16
msgid ""
"In this section we take a closer look at Python's module and import systems "
"as they are the central elements to enforcing structure in your project. We "
"then discuss various perspectives on how to build code which can be extended "
"and tested reliably."
msgstr ""
"Dans cette section, nous allons jeter un œil de plus près sur les systèmes "
"de module et d'import de Python comme ils sont les éléments centraux pour "
"faire respecter une structure dans votre projet. Nous discuterons ensuite "
"des diverses perspectives sur comment construire du code qui peut être "
"étendu et testé de manière fiable."

#: ../../writing/structure.rst:24
msgid "Structure of the Repository"
msgstr "Structure du dépôt"

#: ../../writing/structure.rst:27
msgid "It's Important."
msgstr "C'est important"

#: ../../writing/structure.rst:29
msgid ""
"Just as Code Style, API Design, and Automation are essential for a healthy "
"development cycle, Repository structure is a crucial part of your project's "
"`architecture <http://www.amazon.com/gp/product/1257638017/ref=as_li_ss_tl?"
"ie=UTF8&tag=bookforkind-20&linkCode=as2&camp=1789&creative=39095&creativeASIN=1257638017>`__."
msgstr ""
"Juste comme le style de codage, le design d'API, et l'automatisation sont "
"essentiels à un cycle de développement sain, la structure d'un dépôt est une "
"part cruciale de l'`architecture <http://www.amazon.com/gp/"
"product/1257638017/ref=as_li_ss_tl?"
"ie=UTF8&tag=bookforkind-20&linkCode=as2&camp=1789&creative=39095&creativeASIN=1257638017>`__ "
"de votre projet."

#: ../../writing/structure.rst:34
msgid ""
"When a potential user or contributor lands on your repository's page, they "
"see a few things:"
msgstr ""
"Quand un utilisateur potentiel ou un contributeur arrive sur la page d'un "
"dépôt, ils voient certaines choses:"

#: ../../writing/structure.rst:37
msgid "Project Name"
msgstr "Le nom du projet"

#: ../../writing/structure.rst:38
msgid "Project Description"
msgstr "La description du projet"

#: ../../writing/structure.rst:39
msgid "Bunch O' Files"
msgstr "Un tas de fichiers"

#: ../../writing/structure.rst:41
msgid ""
"Only when they scroll below the fold will the user see your project's README."
msgstr ""
"C'est seulement quand ils font défiler la page que les utilisateurs verront "
"le README de votre projet."

#: ../../writing/structure.rst:44
msgid ""
"If your repo is a massive dump of files or a nested mess of directories, "
"they might look elsewhere before even reading your beautiful documentation."
msgstr ""
"Si votre dépôt est un amas massif de fichiers ou une pagaille imbriquée de "
"répertoires, ils risquent de regarder ailleurs avant même de lire votre "
"belle documentation."

#: ../../writing/structure.rst:48
msgid "Dress for the job you want, not the job you have."
msgstr ""
"Habillez vous pour le job que vous voulez, pas pour le job que vous avez."

#: ../../writing/structure.rst:50
msgid ""
"Of course, first impressions aren't everything. You and your colleagues will "
"spend countless hours working with this repository, eventually becoming "
"intimately familiar with every nook and cranny. The layout of it is "
"important."
msgstr ""
"Bien sûr, les premières impressions ne sont pas tout. Vous et vos collègues "
"allez passer un nombre d'heures incalculable à travailler sur ce dépôt, "
"finalement devenir intimement familier avec tous les coins et recoins. Son "
"organisation est importante."

#: ../../writing/structure.rst:56
msgid "Sample Repository"
msgstr "Dépôt exemple"

#: ../../writing/structure.rst:58
msgid ""
"**tl;dr**: This is what `Kenneth Reitz <http://kennethreitz.org>`_ "
"recommends."
msgstr ""
"**tl;dr** (acronyme de \"Too Long, I Didn't Read it\"): C'est ce que "
"`Kenneth Reitz <http://kennethreitz.org>`_ recommande."

#: ../../writing/structure.rst:60
msgid ""
"This repository is `available on GitHub <https://github.com/kennethreitz/"
"samplemod>`__."
msgstr ""
"Ce dépôt est `disponible sur GitHub <https://github.com/kennethreitz/"
"samplemod>`__."

#: ../../writing/structure.rst:77
msgid "Let's get into some specifics."
msgstr "Entrons dans quelques détails."

#: ../../writing/structure.rst:80
msgid "The Actual Module"
msgstr "Le module actuel"

#: ../../writing/structure.rst:1
msgid "Location"
msgstr "Emplacement"

#: ../../writing/structure.rst:1
msgid "``./sample/`` or ``./sample.py``"
msgstr "``./sample/`` ou ``./sample.py``"

#: ../../writing/structure.rst:1
msgid "Purpose"
msgstr "But"

#: ../../writing/structure.rst:1
msgid "The code of interest"
msgstr "Le code qui nous intéresse"

#: ../../writing/structure.rst:89
msgid ""
"Your module package is the core focus of the repository. It should not be "
"tucked away:"
msgstr ""
"Votre paquet de module est le point central du dépôt. Il ne devrait pas être "
"mis à l'écart:"

#: ../../writing/structure.rst:96
msgid ""
"If your module consists of only a single file, you can place it directly in "
"the root of your repository:"
msgstr ""
"Si votre module consiste en un seul fichier, vous pouvez le placer "
"directement à la racine de votre répertoire:"

#: ../../writing/structure.rst:103
msgid ""
"Your library does not belong in an ambiguous src or python subdirectory."
msgstr ""
"Votre bibliothèque n'appartient pas à un sous-répertoire ambigu comme src ou "
"python."

#: ../../writing/structure.rst:106
msgid "License"
msgstr "Licence"

#: ../../writing/structure.rst:1
msgid "``./LICENSE``"
msgstr "``./LICENSE``"

#: ../../writing/structure.rst:1
msgid "Lawyering up."
msgstr "Se couvrir juridiquement."

#: ../../writing/structure.rst:116
msgid ""
"This is arguably the most important part of your repository, aside from the "
"source code itself. The full license text and copyright claims should exist "
"in this file."
msgstr ""
"Ceci est sans doute la partie la plus importante de votre dépôt, en dehors "
"du code source lui-même. Les revendications de copyright et le texte de la "
"licence complet devraient être dans ce fichier."

#: ../../writing/structure.rst:120
msgid ""
"If you aren't sure which license you should use for your project, check out "
"`choosealicense.com <http://choosealicense.com>`_."
msgstr ""
"Si vous n'êtes pas sûr de la licence que vous souhaitez utiliser pour votre "
"projet, consultez `choosealicense.com <http://choosealicense.com>`_."

#: ../../writing/structure.rst:123
msgid ""
"Of course, you are also free to publish code without a license, but this "
"would prevent many people from potentially using your code."
msgstr ""
"Bien sûr, vous êtes aussi libre de publier votre code sans une licence, mais "
"cela risque potentiellement d'empêcher de nombreuses personnes d'utiliser "
"votre code."

#: ../../writing/structure.rst:127
msgid "Setup.py"
msgstr "Setup.py"

#: ../../writing/structure.rst:1
msgid "``./setup.py``"
msgstr "``./setup.py``"

#: ../../writing/structure.rst:1
msgid "Package and distribution management."
msgstr "Gestion de la distribution et de la création de paquets"

#: ../../writing/structure.rst:136
msgid ""
"If your module package is at the root of your repository, this should "
"obviously be at the root as well."
msgstr ""
"Si votre paquet de module est à la racine de votre dépôt, ceci devrait "
"évidemment être aussi à la racine."

#: ../../writing/structure.rst:140
msgid "Requirements File"
msgstr "Fichier requirements"

#: ../../writing/structure.rst:1
msgid "``./requirements.txt``"
msgstr "``./requirements.txt``"

#: ../../writing/structure.rst:1
msgid "Development dependencies."
msgstr "Dépendances de développement."

#: ../../writing/structure.rst:149
msgid ""
"A `pip requirements file <https://pip.pypa.io/en/stable/user_guide/"
"#requirements-files>`__ should be placed at the root of the repository. It "
"should specify the dependencies required to contribute to the project: "
"testing, building, and generating documentation."
msgstr ""
"Un `fichier requirements de pip <https://pip.pypa.io/en/stable/user_guide/"
"#requirements-files>`__ devrait être placé à la racine du dépôt. Il devrait "
"spécifier les dépendances requises pour contribuer au projet: les tests, les "
"builds et la génération de la documentation."

#: ../../writing/structure.rst:155
msgid ""
"If your project has no development dependencies, or you prefer development "
"environment setup via ``setup.py``, this file may be unnecessary."
msgstr ""
"Si votre projet n'a pas de dépendances de développement ou vous préférez la "
"configuration de l'environnement de développement via ``setup.py``, ce "
"fichier peut s'avérer non nécessaire."

#: ../../writing/structure.rst:160
msgid "Documentation"
msgstr "Documentation"

#: ../../writing/structure.rst:1
msgid "``./docs/``"
msgstr "``./docs/``"

#: ../../writing/structure.rst:1
msgid "Package reference documentation."
msgstr "Documentation de  référence des paquets."

#: ../../writing/structure.rst:169
msgid "There is little reason for this to exist elsewhere."
msgstr "Il y a très peu de raison pour cela qu'il existe ailleurs."

#: ../../writing/structure.rst:172
msgid "Test Suite"
msgstr "Suite de tests"

#: ../../writing/structure.rst:1
msgid "``./test_sample.py`` or ``./tests``"
msgstr "``./test_sample.py`` ou ``./tests``"

#: ../../writing/structure.rst:1
msgid "Package integration and unit tests."
msgstr "Intégration de paquets et tests unitaires"

#: ../../writing/structure.rst:181
msgid "Starting out, a small test suite will often exist in a single file:"
msgstr ""
"En débutant, une petite suite de tests existera souvent dans un seul fichier:"

#: ../../writing/structure.rst:187
msgid ""
"Once a test suite grows, you can move your tests to a directory, like so:"
msgstr ""
"Une fois que la suite de tests grossit, vous pouvez déplacer vos tests dans "
"un répertoire, comme ceci:"

#: ../../writing/structure.rst:195
msgid ""
"Obviously, these test modules must import your packaged module to test it. "
"You can do this a few ways:"
msgstr ""
"Évidemment, ces modules de test doivent importer votre module empaqueté pour "
"le tester. Vous pouvez le faire de plusieurs façons:"

#: ../../writing/structure.rst:198
msgid "Expect the package to be installed in site-packages."
msgstr "Attendre que le paquet soit installé dans site-packages."

#: ../../writing/structure.rst:199
msgid ""
"Use a simple (but *explicit*) path modification to resolve the package "
"properly."
msgstr ""
"Utiliser un modification de chemin simple (mais *explicite*) pour résoudre "
"le paquet correctement."

#: ../../writing/structure.rst:202
msgid ""
"I highly recommend the latter. Requiring a developer to run `setup.py "
"<http://setup.py>`__ develop to test an actively changing codebase also "
"requires them to have an isolated environment setup for each instance of the "
"codebase."
msgstr ""
"Je recommande fortement ce dernier. Demander à un développeur de lancer "
"`setup.py <http://setup.py>`__ develop pour tester une base de code qui "
"change activement lui demande aussi d'avoir une configuration "
"d'environnement isolé pour chaque instance de la base de code."

#: ../../writing/structure.rst:207
msgid ""
"To give the individual tests import context, create a tests/context.py file:"
msgstr ""
"Pour donner un contexte d'importation aux tests individuels, créez un "
"fichier tests/config.py."

#: ../../writing/structure.rst:218
msgid "Then, within the individual test modules, import the module like so:"
msgstr ""
"Ensuite, dans les modules de test individuels, importez le module comme ceci:"

#: ../../writing/structure.rst:224
msgid "This will always work as expected, regardless of installation method."
msgstr ""
"Cela fonctionnera toujours comme prévu quelle que soit la méthode "
"d'installation."

#: ../../writing/structure.rst:226
msgid ""
"Some people will assert that you should distribute your tests within your "
"module itself -- I disagree. It often increases complexity for your users; "
"many test suites often require additional dependencies and runtime contexts."
msgstr ""
"Certains personnes avanceront que vous devriez distribuer vos tests à "
"l'intérieur du module lui-même -- Je ne suis pas d'accord. Cela augmente "
"souvent la complexité pour vos utilisateurs; de nombreuses suites de test "
"nécessitent souvent des dépendances et des contextes d'exécution "
"supplémentaires."

#: ../../writing/structure.rst:232
msgid "Makefile"
msgstr "Makefile"

#: ../../writing/structure.rst:1
msgid "``./Makefile``"
msgstr "``./Makefile``"

#: ../../writing/structure.rst:1
msgid "Generic management tasks."
msgstr "Tâches de gestion génériques."

#: ../../writing/structure.rst:242
msgid ""
"If you look at most of my projects or any Pocoo project, you'll notice a "
"Makefile laying around. Why? These projects aren't written in C... In short, "
"make is a incredibly useful tool for defining generic tasks for your project."
msgstr ""
"Si vous jetez un œil à la plupart de mes projets ou n'importe quel projet de "
"Pocoo, vous remarquerez un Makefile qui traîne autour. Pourquoi? Ces projets "
"ne sont pas écrits en C... En bref, make est un outil incroyablement utile "
"pour définir des tâches génériques pour votre projet."

#: ../../writing/structure.rst:247
msgid "**Sample Makefile:**"
msgstr "**Makefile exemple:**"

#: ../../writing/structure.rst:257
msgid ""
"Other generic management scripts (e.g. ``manage.py`` or ``fabfile.py``) "
"belong at the root of the repository as well."
msgstr ""
"D'autres scripts de gestion génériques (comme ``manage.py`` ou ``fabfile."
"py``) appartiennent aussi à la racine du dépôt."

#: ../../writing/structure.rst:261
msgid "Regarding Django Applications"
msgstr "En ce qui concerne les applications Django"

#: ../../writing/structure.rst:263
msgid ""
"I've noticed a new trend in Django applications since the release of Django "
"1.4. Many developers are structuring their repositories poorly due to the "
"new bundled application templates."
msgstr ""
"J'ai noté une nouvelle tendance dans les applications Django depuis la "
"sortie de Django 1.4. De nombreux développeurs structurent leurs dépôts de "
"manière médiocre à cause des nouveaux modèles d'applications mis à "
"disposition."

#: ../../writing/structure.rst:267
msgid ""
"How? Well, they go to their bare and fresh repository and run the following, "
"as they always have:"
msgstr ""
"Comment? Bien, ils vont dans leur nouveau dépôt encore nu et frais et "
"exécutent ce qui suit, comme ils l'ont toujours fait:"

#: ../../writing/structure.rst:274
msgid "The resulting repository structure looks like this:"
msgstr "La structure du dépôt résultant ressemble à ceci:"

#: ../../writing/structure.rst:284
msgid "Don't do this."
msgstr "Ne faites pas ça."

#: ../../writing/structure.rst:286
msgid ""
"Repetitive paths are confusing for both your tools and your developers. "
"Unnecessary nesting doesn't help anybody (unless they're nostalgic for "
"monolithic SVN repos)."
msgstr ""
"Des chemins répétitifs sont sources de confusion à la fois pour vos outils "
"et vos développeurs. Une imbrication inutile n'aide personne (à moins d'être "
"nostalgique des dépôts SVN monolithiques)"

#: ../../writing/structure.rst:290
msgid "Let's do it properly:"
msgstr "Faisons-le proprement:"

#: ../../writing/structure.rst:296
msgid "Note the \"``.``\"."
msgstr "Notez le \"``.``\"."

#: ../../writing/structure.rst:298
msgid "The resulting structure:"
msgstr "La structure résultante:"

#: ../../writing/structure.rst:312
msgid "Structure of Code is Key"
msgstr "La structure du code est la clé"

#: ../../writing/structure.rst:314
msgid ""
"Thanks to the way imports and modules are handled in Python, it is "
"relatively easy to structure a Python project. Easy, here, means that you do "
"not have many constraints and that the module importing model is easy to "
"grasp. Therefore, you are left with the pure architectural task of crafting "
"the different parts of your project and their interactions."
msgstr ""
"Grâce à la façon dont les imports et les modules sont traités en Python, il "
"est relativement facile de structurer un projet Python. Facile, ici, "
"signifie que vous n'avez pas beaucoup de contraintes et que le modèle qui "
"fait l'import du module est facile à comprendre. Par conséquent, vous vous "
"retrouvez avec la tâche architecturale pure de concevoir les différentes "
"parties de votre projet et de leurs interactions."

#: ../../writing/structure.rst:321
msgid ""
"Easy structuring of a project means it is also easy to do it poorly. Some "
"signs of a poorly structured project include:"
msgstr ""
"Une structuration facile de projet signifie que c'est aussi facile de mal le "
"faire. Certains signes d'un projet mal structuré incluent:"

#: ../../writing/structure.rst:325
msgid ""
"Multiple and messy circular dependencies: if your classes Table and Chair "
"in :file:`furn.py` need to import Carpenter from :file:`workers.py` to "
"answer a question such as ``table.isdoneby()``, and if conversely the class "
"Carpenter needs to import Table and Chair, to answer the question "
"``carpenter.whatdo()``, then you have a circular dependency. In this case "
"you will have to resort to fragile hacks such as using import statements "
"inside methods or functions."
msgstr ""
"Des dépendances circulaires multiples et désordonnées: si vos classes Table "
"et Chair dans :file:`furn.py` ont besoin d'importer Carpenter depuis :file:"
"`workers.py` pour répondre à une question comme ``table.isdoneby()``, et si "
"au contraire la classe Carpenter a besoin d'importer Table et Chair, pour "
"répondre à la question ``carpenter.whatdo()``, alors vous avez une "
"dépendance circulaire. Dans ce cas, vous devrez recourir à des hacks "
"fragiles telles que l'utilisation de déclarations d'importation à "
"l'intérieur de méthodes ou de fonctions."

#: ../../writing/structure.rst:334
msgid ""
"Hidden coupling: each and every change in Table's implementation breaks 20 "
"tests in unrelated test cases because it breaks Carpenter's code, which "
"requires very careful surgery to adapt the change. This means you have too "
"many assumptions about Table in Carpenter's code or the reverse."
msgstr ""
"Couplage caché: chaque changement dans l'implémentation de Table casse 20 "
"tests dans des cas de tests non liés parce qu'il casse le code de Carpenter, "
"qui nécessite une intervention ciblée très prudente pour adapter le "
"changement. Cela signifie que vous avez trop d'hypothèses à propos de Table "
"dans le code de Carpenter ou l'inverse."

#: ../../writing/structure.rst:340
msgid ""
"Heavy usage of global state or context: instead of explicitly passing "
"``(height, width, type, wood)`` to each other, Table and Carpenter rely on "
"global variables that can be modified and are modified on the fly by "
"different agents. You need to scrutinize all access to these global "
"variables to understand why a rectangular table became a square, and "
"discover that remote template code is also modifying this context, messing "
"with table dimensions."
msgstr ""
"Un usage intensif d'un état ou d'un contexte global: au lieu de passer "
"explicitement ``(height, width, type, wood)`` de l'un à l'autre, Table et "
"Carpenter s’appuient sur des variables globales qui peuvent être modifiées "
"et sont modifiées à la volée par différents agents. Vous devez examiner tous "
"les accès à ces variables globales pour comprendre pourquoi une table "
"rectangulaire est devenu un carré, et découvrir que le code du modèle "
"distant est aussi en train de modifier ce contexte, mettant le désordre dans "
"les dimensions de la table."

#: ../../writing/structure.rst:349
msgid ""
"Spaghetti code: multiple pages of nested if clauses and for loops with a lot "
"of copy-pasted procedural code and no proper segmentation are known as "
"spaghetti code. Python's meaningful indentation (one of its most "
"controversial features) make it very hard to maintain this kind of code. So "
"the good news is that you might not see too much of it."
msgstr ""
"Code Spaghetti: plusieurs pages de clauses if imbriquée et de boucles for "
"avec beaucoup de code procédural copie-collé et aucune segmentation adéquate "
"sont connus comme du code spaghetti. L'indentation significative de Python "
"(une de ses caractéristiques les plus controversées) rend très difficile de "
"maintenir ce genre de code. Donc, la bonne nouvelle est que vous pourriez ne "
"pas en voir de trop."

#: ../../writing/structure.rst:356
msgid ""
"Ravioli code is more likely in Python: it consists of hundreds of similar "
"little pieces of logic, often classes or objects, without proper structure. "
"If you never can remember if you have to use FurnitureTable, AssetTable or "
"Table, or even TableNew for your task at hand, you might be swimming in "
"ravioli code."
msgstr ""
"Le code Ravioli est plus probable en Python: il se compose de centaines de "
"petits morceaux semblables de logique, souvent des classes ou des objets, "
"sans structure appropriée. Si vous ne pouvez vous rappeler si vous avez à "
"utiliser FurnitureTable, AssetTable ou Table, ou même TableNew pour votre "
"tâche, vous pourriez être en train de nager dans du code ravioli."

#: ../../writing/structure.rst:364
msgid "Modules"
msgstr "Modules"

#: ../../writing/structure.rst:366
msgid ""
"Python modules are one of the main abstraction layers available and probably "
"the most natural one. Abstraction layers allow separating code into parts "
"holding related data and functionality."
msgstr ""
"Les modules Python sont l'une des principales couches d'abstraction "
"disponible et probablement la plus naturelle. Les couches d'abstraction "
"permettent la séparation du code dans des parties contenant des données et "
"des fonctionnalités connexes."

#: ../../writing/structure.rst:370
msgid ""
"For example, a layer of a project can handle interfacing with user actions, "
"while another would handle low-level manipulation of data. The most natural "
"way to separate these two layers is to regroup all interfacing functionality "
"in one file, and all low-level operations in another file. In this case, the "
"interface file needs to import the low-level file. This is done with the "
"``import`` and ``from ... import`` statements."
msgstr ""
"Par exemple, une couche d'un projet peut gérer l'interface avec les actions "
"utilisateurs, tandis qu'un autre gérerait la manipulation de bas-niveau des "
"données. La façon la plus naturelle de séparer ces deux couches est de "
"regrouper toutes les fonctionnalités d'interface dans un seul fichier, et "
"toutes les opérations de bas-niveau dans un autre fichier. Dans ce cas, le "
"fichier d'interface doit importer le fichier de bas-niveau. Cela se fait "
"avec les déclarations ``import`` et ``from ... import``."

#: ../../writing/structure.rst:377
msgid ""
"As soon as you use `import` statements you use modules. These can be either "
"built-in modules such as `os` and `sys`, third-party modules you have "
"installed in your environment, or your project's internal modules."
msgstr ""
"Dès que vous utilisez les déclarations `import`, vous utilisez des modules. "
"Ceux-ci peuvent être soit des modules intégrés comme `os` et `sys`, soit des "
"modules tiers que vous avez installé dans votre environnement, ou dans les "
"modules internes de votre projet."

#: ../../writing/structure.rst:381
msgid ""
"To keep in line with the style guide, keep module names short, lowercase, "
"and be sure to avoid using special symbols like the dot (.) or question mark "
"(?). So a file name like :file:`my.spam.py` is one you should avoid! Naming "
"this way will interfere with the way Python looks for modules."
msgstr ""
"Pour rester aligné avec le guide de style, garder les noms de modules "
"courts, en minuscules, et assurez-vous d'éviter d'utiliser des symboles "
"spéciaux comme le point (.) ou le point d'interrogation (?). Donc, un nom de "
"fichier comme :file:`my.spam.py` est l'un de ceux que vous devriez éviter! "
"Nommer de cette façon interfère avec la manière dont Python cherche pour les "
"modules."

#: ../../writing/structure.rst:386
msgid ""
"In the case of `my.spam.py` Python expects to find a :file:`spam.py` file in "
"a folder named :file:`my` which is not the case. There is an `example "
"<http://docs.python.org/tutorial/modules.html#packages>`_ of how the dot "
"notation should be used in the Python docs."
msgstr ""
"Dans le cas de my.spam.py`, Python attend de trouver un fichier :file:`spam."
"py` dans un dossier nommé :file:`my`, ce qui n'est pas le cas. Il y a un "
"`exemple <http://docs.python.org/tutorial/modules.html#packages>`_ de la "
"comment la notation par point devrait être utilisée dans la documentation "
"Python."

#: ../../writing/structure.rst:391
msgid ""
"If you'd like you could name your module :file:`my_spam.py`, but even our "
"friend the underscore should not be seen often in module names."
msgstr ""
"Si vous souhaitez, vous pouvez nommer votre module :file:`my_spam.py`, mais "
"même notre ami le underscore (tiret bas) ne devrait pas être vu souvent dans "
"les noms de modules."

#: ../../writing/structure.rst:394
msgid ""
"Aside from some naming restrictions, nothing special is required for a "
"Python file to be a module, but you need to understand the import mechanism "
"in order to use this concept properly and avoid some issues."
msgstr ""
"Mis à part quelques restrictions de nommage, rien de spécial n'est "
"nécessaire pour qu'un fichier Python puisse être un module, mais vous avez "
"besoin de comprendre le mécanisme d'import afin d'utiliser ce concept "
"correctement et éviter certains problèmes."

#: ../../writing/structure.rst:398
msgid ""
"Concretely, the ``import modu`` statement will look for the proper file, "
"which is :file:`modu.py` in the same directory as the caller if it exists.  "
"If it is not found, the Python interpreter will search for :file:`modu.py` "
"in the \"path\" recursively and raise an ImportError exception if it is not "
"found."
msgstr ""
"Concrètement, la déclaration ``import modu`` va chercher le fichier "
"approprié, qui est :file:`modu.py` dans le même répertoire que l'appelant si "
"il existe. Si il n'est pas trouvé, l'interpréteur Python va rechercher :file:"
"`modu.py` dans le \"path\" récursivement et lever une exception ImportError "
"si il n'est pas trouvé."

#: ../../writing/structure.rst:403
msgid ""
"Once :file:`modu.py` is found, the Python interpreter will execute the "
"module in an isolated scope. Any top-level statement in :file:`modu.py` will "
"be executed, including other imports if any. Function and class definitions "
"are stored in the module's dictionary."
msgstr ""
"Une fois que :file:`modu.py` est trouvé, l'interpréteur Python va exécuter "
"le module dans une portée isolée. N'importe quelle déclaration à la racine "
"de :file:`modu.py` sera exécutée, incluant les autres imports le cas "
"échéant. Les définitions de fonction et classe sont stockées dans le "
"dictionnaire du module."

#: ../../writing/structure.rst:408
msgid ""
"Then, the module's variables, functions, and classes will be available to "
"the caller through the module's namespace, a central concept in programming "
"that is particularly helpful and powerful in Python."
msgstr ""
"Ensuite, les variables, les fonctions et les classes du module seront mises "
"à disposition de l'appelant via l'espace de nom du module, un concept "
"central dans la programmation qui est particulièrement utile et puissant en "
"Python."

#: ../../writing/structure.rst:412
msgid ""
"In many languages, an ``include file`` directive is used by the preprocessor "
"to take all code found in the file and 'copy' it into the caller's code. It "
"is different in Python: the included code is isolated in a module namespace, "
"which means that you generally don't have to worry that the included code "
"could have unwanted effects, e.g. override an existing function with the "
"same name."
msgstr ""
"Dans de nombreuses langages, une directive ``include file`` est utilisée par "
"le préprocesseur pour prendre tout le code trouvé dans le fichier et le "
"'copier' dans le code de l'appelant. C'est différent en Python: le code "
"inclus est isolé dans un espace de nom de module, ce qui signifie que vous "
"n'avez pas généralement à vous soucier que le code inclus puisse avoir des "
"effets indésirables, par exemple remplacer une fonction existante avec le "
"même nom."

#: ../../writing/structure.rst:418
msgid ""
"It is possible to simulate the more standard behavior by using a special "
"syntax of the import statement: ``from modu import *``. This is generally "
"considered bad practice. **Using** ``import *`` **makes code harder to read "
"and makes dependencies less compartmentalized**."
msgstr ""
"Il est possible de simuler le comportement plus standard en utilisant une "
"syntaxe particulière de la déclaration d'import: ``from modu import *``. "
"Ceci est généralement considéré comme une mauvaise pratique. "
"**L'utilisation** d'``import *`` **rend le code plus difficile à lire et "
"rend les dépendances moins cloisonnées**."

#: ../../writing/structure.rst:423
msgid ""
"Using ``from modu import func`` is a way to pinpoint the function you want "
"to import and put it in the global namespace. While much less harmful than "
"``import *`` because it shows explicitly what is imported in the global "
"namespace, its only advantage over a simpler ``import modu`` is that it will "
"save a little typing."
msgstr ""
"L'utilisation de ``from modu import func`` est un moyen de cibler la "
"fonction que vous souhaitez importer et la mettre dans l'espace de nom "
"global. Bien que beaucoup moins néfaste que ``import *`` parce que cela "
"montre explicitement ce qui est importé dans l'espace de nom global, son "
"seul avantage par rapport à un ``import modu``, plus simple est qu'il "
"permettra d'économiser un peu de frappe clavier."

#: ../../writing/structure.rst:429
msgid "**Very bad**"
msgstr "**Très mauvais**"

#: ../../writing/structure.rst:438
msgid "**Better**"
msgstr "**Mieux**"

#: ../../writing/structure.rst:446 ../../writing/structure.rst:808
msgid "**Best**"
msgstr "**Le mieux**"

#: ../../writing/structure.rst:454
msgid ""
"As mentioned in the :ref:`code_style` section, readability is one of the "
"main features of Python. Readability means to avoid useless boilerplate text "
"and clutter, therefore some efforts are spent trying to achieve a certain "
"level of brevity. But terseness and obscurity are the limits where brevity "
"should stop. Being able to tell immediately where a class or function comes "
"from, as in the ``modu.func`` idiom, greatly improves code readability and "
"understandability in all but the simplest single file projects."
msgstr ""
"Comme mentionné dans la section :ref:`code_style`, la lisibilité est l'une "
"des principales caractéristiques de Python. La lisibilité signifie éviter du "
"texte standard inutile et le désordre, donc des efforts sont consacrés pour "
"essayer de parvenir à un certain niveau de concision. Mais le laconisme et "
"l'obscur sont les limites où la brièveté doit cesser. Être en mesure de dire "
"immédiatement d'où une classe ou une fonction provient, comme dans l'idiome "
"``modu.func``, améliore grandement la lisibilité du code et la "
"compréhensibilité dans tous les projets même ceux avec le plus simple "
"fichier unique."

#: ../../writing/structure.rst:464
msgid "Packages"
msgstr "Paquets"

#: ../../writing/structure.rst:466
msgid ""
"Python provides a very straightforward packaging system, which is simply an "
"extension of the module mechanism to a directory."
msgstr ""
"Python fournit un système de packaging très simple, qui est simplement une "
"extension du mécanisme de module à un répertoire."

#: ../../writing/structure.rst:469
msgid ""
"Any directory with an :file:`__init__.py` file is considered a Python "
"package. The different modules in the package are imported in a similar "
"manner as plain modules, but with a special behavior for the :file:`__init__."
"py` file, which is used to gather all package-wide definitions."
msgstr ""
"Tout répertoire avec un fichier :file:`__init__.py` est considéré comme un "
"paquet Python. Les différents modules dans le paquet sont importés d'une "
"manière similaire comme des modules simples, mais avec un comportement "
"spécial pour le fichier :file:`__init__.py`, qui est utilisé pour rassembler "
"toutes les définitions à l'échelle des paquets."

#: ../../writing/structure.rst:474
msgid ""
"A file :file:`modu.py` in the directory :file:`pack/` is imported with the "
"statement ``import pack.modu``. This statement will look for an :file:"
"`__init__.py` file in :file:`pack`, execute all of its top-level statements. "
"Then it will look for a file named :file:`pack/modu.py` and execute all of "
"its top-level statements. After these operations, any variable, function, or "
"class defined in :file:`modu.py` is available in the pack.modu namespace."
msgstr ""
"Un fichier :file:`modu.py` dans le répertoire :file:`pack/` est importé avec "
"la déclaration ``import pack.modu``. Cette déclaration va chercher un "
"fichier :file:`__init__.py` dans :file:`pack`, exécuter toutes ses "
"déclarations de premier niveau. Puis elle va chercher un fichier nommé :file:"
"`pack/modu.py` et exécuter tous ses déclarations de premier niveau. Après "
"ces opérations, n'importe quelle variable, fonction ou classe définie dans :"
"file:`modu.py` est disponible dans l'espace de nom pack.modu."

#: ../../writing/structure.rst:482
msgid ""
"A commonly seen issue is to add too much code to :file:`__init__.py` files. "
"When the project complexity grows, there may be sub-packages and sub-sub-"
"packages in a deep directory structure. In this case, importing a single "
"item from a sub-sub-package will require executing all :file:`__init__.py` "
"files met while traversing the tree."
msgstr ""
"Un problème couramment vu est d'ajouter trop de code aux fichiers :file:"
"`__init__.py`. Lorsque la complexité du projet grossit, il peut y avoir des "
"sous-paquets et sous-sous-paquets dans une structure de répertoire profonde. "
"Dans ce cas, importer un seul élément à partir d'un sous-sous-paquet "
"nécessitera d'exécuter tous les fichiers :file:`__init__.py` rencontrés en "
"traversant l'arbre."

#: ../../writing/structure.rst:488
msgid ""
"Leaving an :file:`__init__.py` file empty is considered normal and even a "
"good practice, if the package's modules and sub-packages do not need to "
"share any code."
msgstr ""
"Laisser un fichier :file:`__init__.py` vide est considéré comme normal et "
"même une bonne pratique, si les modules du paquet et des sous-paquets n'ont "
"pas besoin de partager aucun code."

#: ../../writing/structure.rst:492
msgid ""
"Lastly, a convenient syntax is available for importing deeply nested "
"packages: ``import very.deep.module as mod``. This allows you to use `mod` "
"in place of the verbose repetition of ``very.deep.module``."
msgstr ""
"Enfin, une syntaxe pratique est disponible pour importer des paquets "
"imbriquées profondément: ``import very.deep.module as mod``. Cela vous "
"permet d'utiliser `mod` à la place de la répétition verbeuse de ``very.deep."
"module``."

#: ../../writing/structure.rst:497
msgid "Object-oriented programming"
msgstr "Programmation orientée objet"

#: ../../writing/structure.rst:499
msgid ""
"Python is sometimes described as an object-oriented programming language. "
"This can be somewhat misleading and needs to be clarified."
msgstr ""
"Python est parfois décrit comme un langage de programmation orienté objet. "
"Cela peut être quelque peu trompeur et doit être clarifié."

#: ../../writing/structure.rst:502
msgid ""
"In Python, everything is an object, and can be handled as such. This is what "
"is meant when we say, for example, that functions are first-class objects. "
"Functions, classes, strings, and even types are objects in Python: like any "
"object, they have a type, they can be passed as function arguments, and they "
"may have methods and properties. In this understanding, Python is an object-"
"oriented language."
msgstr ""
"En Python, tout est un objet, et peut être manipulé en tant que tel. Voilà "
"ce que l'on entend quand nous disons, par exemple, que les fonctions sont "
"des objets de première classe. Les fonctions, les classes, les chaînes et "
"même les types sont des objets en Python: comme tout objet, ils ont un type, "
"ils peuvent être passés comme arguments de fonction, et ils peuvent avoir "
"des méthodes et propriétés. Sur ce point, Python est un langage orienté "
"objet."

#: ../../writing/structure.rst:509
msgid ""
"However, unlike Java, Python does not impose object-oriented programming as "
"the main programming paradigm. It is perfectly viable for a Python project "
"to not be object-oriented, i.e. to use no or very few class definitions, "
"class inheritance, or any other mechanisms that are specific to object-"
"oriented programming."
msgstr ""
"Cependant, contrairement à Java, Python n'impose pas la programmation "
"orientée objet comme paradigme de programmation principal. Il est "
"parfaitement viable pour un projet de Python de ne pas être orienté objet, à "
"savoir de ne pas utiliser ou très peu de définitions de classes, d'héritage "
"de classe, ou d'autres mécanismes qui sont spécifiques à la programmation "
"orientée objet."

#: ../../writing/structure.rst:515
msgid ""
"Moreover, as seen in the modules_ section, the way Python handles modules "
"and namespaces gives the developer a natural way to ensure the encapsulation "
"and separation of abstraction layers, both being the most common reasons to "
"use object-orientation. Therefore, Python programmers have more latitude to "
"not use object-orientation, when it is not required by the business model."
msgstr ""
"En outre, comme on le voit dans la section modules_, la façon dont Python "
"gère les modules et les espaces de nom donne au développeur un moyen naturel "
"pour assurer l'encapsulation et la séparation des couches d'abstraction, les "
"deux étant les raisons les plus courantes d'utiliser l'orientation objet. "
"Par conséquent, les programmeurs Python ont plus de latitude pour ne pas "
"utiliser l'orientation objet, quand elle n'est pas requise par le modèle "
"métier."

#: ../../writing/structure.rst:522
msgid ""
"There are some reasons to avoid unnecessary object-orientation. Defining "
"custom classes is useful when we want to glue together some state and some "
"functionality. The problem, as pointed out by the discussions about "
"functional programming, comes from the \"state\" part of the equation."
msgstr ""
"Il y a quelques raisons pour éviter inutilement l'orientation objet. Définir "
"des classes personnalisées est utile lorsque l'on veut coller ensemble un "
"état et certaines fonctionnalités. Le problème, comme l'a souligné les "
"discussions sur la programmation fonctionnelle, vient de la partie \"state\" "
"de l'équation."

#: ../../writing/structure.rst:527
msgid ""
"In some architectures, typically web applications, multiple instances of "
"Python processes are spawned to respond to external requests that can happen "
"at the same time. In this case, holding some state into instantiated "
"objects, which means keeping some static information about the world, is "
"prone to concurrency problems or race-conditions. Sometimes, between the "
"initialization of the state of an object (usually done with the "
"``__init__()`` method) and the actual use of the object state through one of "
"its methods, the world may have changed, and the retained state may be "
"outdated. For example, a request may load an item in memory and mark it as "
"read by a user. If another request requires the deletion of this item at the "
"same time, it may happen that the deletion actually occurs after the first "
"process loaded the item, and then we have to mark as read a deleted object."
msgstr ""
"Dans certaines architectures, typiquement des applications Web, plusieurs "
"instances de processus Python sont lancées pour répondre aux demandes "
"externes qui peuvent se produire en même temps. Dans ce cas, tenir quelques "
"états dans des objets instanciés, ce qui signifie garder des informations "
"statiques sur le monde, est sujet à des problèmes de concurrence ou de race-"
"conditions. Parfois, entre l'initialisation de l'état d'un objet "
"(généralement fait avec la méthode  ``__init__()``) et l'utilisation réelle "
"de l'état de l'objet à travers l'une de ses méthodes, le monde peut avoir "
"changé, et l'état retenu peut ne plus être à jour. Par exemple, une requête "
"peut charger un élément en mémoire et le marquer comme lu par un "
"utilisateur. Si une autre requête nécessite la suppression de cet article "
"dans le même temps, il peut arriver que la suppression se produise pour  de "
"vrai après que le premier processus ait chargé l'élément, et ensuite nous "
"devons marquer comme lu un objet supprimé."

#: ../../writing/structure.rst:540
msgid ""
"This and other issues led to the idea that using stateless functions is a "
"better programming paradigm."
msgstr ""
"Ceci et d'autres problèmes a conduit à l'idée que l'utilisation des "
"fonctions sans état est un meilleur paradigme de programmation."

#: ../../writing/structure.rst:543
msgid ""
"Another way to say the same thing is to suggest using functions and "
"procedures with as few implicit contexts and side-effects as possible. A "
"function's implicit context is made up of any of the global variables or "
"items in the persistence layer that are accessed from within the function. "
"Side-effects are the changes that a function makes to its implicit context. "
"If a function saves or deletes data in a global variable or in the "
"persistence layer, it is said to have a side-effect."
msgstr ""
"Une autre façon de dire la même chose est de suggérer l'utilisation des "
"fonctions et procédures avec le moins de contextes implicites et d'effets de "
"bord possibles. Le contexte d'une fonction implicite est composée de "
"n'importe quelles variables ou objets globaux dans la couche de persistance "
"qui sont accessibles depuis l'intérieur de la fonction. Les effets de bord "
"sont les changements qu'une fonction fait à son contexte implicite. Si une "
"fonction sauve ou supprime la donnée dans une variable globale ou dans la "
"couche de persistance, elle est dite comme ayant un effet de bord."

#: ../../writing/structure.rst:551
msgid ""
"Carefully isolating functions with context and side-effects from functions "
"with logic (called pure functions) allow the following benefits:"
msgstr ""
"Isoler soigneusement les fonctions avec un contexte et des effets de bord "
"depuis des fonctions avec une logique (appelé fonctions pures) permet les "
"avantages suivants:"

#: ../../writing/structure.rst:554
msgid ""
"Pure functions are deterministic: given a fixed input, the output will "
"always be the same."
msgstr ""
"Les fonctions pures sont déterministes: pour une entrée donnée fixe, la "
"sortie sera toujours la même."

#: ../../writing/structure.rst:557
msgid ""
"Pure functions are much easier to change or replace if they need to be "
"refactored or optimized."
msgstr ""
"Les fonctions pures sont beaucoup plus faciles à changer ou remplacer si "
"elles doivent être refactorisées ou optimisées."

#: ../../writing/structure.rst:560
msgid ""
"Pure functions are easier to test with unit-tests: There is less need for "
"complex context setup and data cleaning afterwards."
msgstr ""
"Les fonctions pures sont plus faciles à tester avec des tests unitaires: il "
"y a moins besoin d'une configuration du contexte complexe et d'un nettoyage "
"des données après."

#: ../../writing/structure.rst:563
msgid "Pure functions are easier to manipulate, decorate, and pass around."
msgstr ""
"Les fonctions pures sont plus faciles à manipuler, décorer, et déplacer."

#: ../../writing/structure.rst:565
msgid ""
"In summary, pure functions are more efficient building blocks than classes "
"and objects for some architectures because they have no context or side-"
"effects."
msgstr ""
"En résumé, les fonctions pures sont des blocs de construction plus efficaces "
"que les classes et les objets pour certaines architectures parce qu'elles "
"n'ont pas de contexte ou d'effets de bord."

#: ../../writing/structure.rst:568
msgid ""
"Obviously, object-orientation is useful and even necessary in many cases, "
"for example when developing graphical desktop applications or games, where "
"the things that are manipulated (windows, buttons, avatars, vehicles) have a "
"relatively long life of their own in the computer's memory."
msgstr ""
"Évidemment, l'orientation objet est utile et même nécessaire dans de "
"nombreux cas, par exemple lors du développement d'applications graphiques de "
"bureau ou des jeux, où les choses qui sont manipulés (fenêtres, boutons, "
"avatars, véhicules) ont une vie relativement longue par elle-même dans la "
"mémoire de l'ordinateur."

#: ../../writing/structure.rst:575
msgid "Decorators"
msgstr "Décorateurs"

#: ../../writing/structure.rst:577
msgid ""
"The Python language provides a simple yet powerful syntax called "
"'decorators'. A decorator is a function or a class that wraps (or decorates) "
"a function or a method. The 'decorated' function or method will replace the "
"original 'undecorated' function or method. Because functions are first-class "
"objects in Python, this can be done 'manually', but using the @decorator "
"syntax is clearer and thus preferred."
msgstr ""
"Le langage Python fournit une syntaxe simple mais puissante appelée "
"'décorateurs'. Un décorateur est une fonction ou une classe qui enveloppe "
"(ou décore) une fonction ou une méthode. La fonction ou méthode 'décorée\" "
"remplacera la fonction ou méthode originale 'non décorée' . Parce que les "
"fonctions sont des objets de première classe en Python, cela peut être fait "
"'manuellement', mais utiliser la syntaxe @decorator est plus clair et donc "
"préféré."

#: ../../writing/structure.rst:600
msgid ""
"This mechanism is useful for separating concerns and avoiding external un-"
"related logic 'polluting' the core logic of the function or method. A good "
"example of a piece of functionality that is better handled with decoration "
"is memorization or caching: you want to store the results of an expensive "
"function in a table and use them directly instead of recomputing them when "
"they have already been computed. This is clearly not part of the function "
"logic."
msgstr ""
"Ce mécanisme est utile pour la \"Separation of concerns\" et évite à une "
"logique externe non liée de \"polluer\" la logique de base de la fonction ou "
"de la méthode. Un bon exemple de morceau de fonctionnalité qui est mieux "
"géré avec la décoration est la mémorisation ou la mise en cache: vous voulez "
"stocker les résultats d'une fonction coûteuse dans une table et les utiliser "
"directement au lieu de les recalculer quand ils ont déjà été calculés. Ceci "
"ne fait clairement pas partie de la logique de la fonction."

#: ../../writing/structure.rst:609
msgid "Context Managers"
msgstr "Gestionnaires de contexte"

#: ../../writing/structure.rst:611
msgid ""
"A context manager is a Python object that provides extra contextual "
"information to an action. This extra information takes the form of running a "
"callable upon initiating the context using the ``with`` statement, as well "
"as running a callable upon completing all the code inside the ``with`` "
"block. The most well known example of using a context manager is shown here, "
"opening on a file:"
msgstr ""
"Un gestionnaire de contexte est un objet Python qui fournit une information "
"contextuelle supplémentaire à une action. Cette information supplémentaire "
"prend la forme de l'exécution d'un callable lors de l'initialisation d'un "
"contexte à l'aide de la déclaration ``with``, ainsi que l'exécution d'un "
"callable après avoir terminé tout le code à l'intérieur du bloc ``with``. "
"L'exemple le plus connu d'utilisation d'un gestionnaire de contexte est "
"montré ici, à l'ouverture d'un fichier:"

#: ../../writing/structure.rst:622
msgid ""
"Anyone familiar with this pattern knows that invoking ``open`` in this "
"fashion ensures that ``f``'s ``close`` method will be called at some point. "
"This reduces a developer's cognitive load and makes the code easier to read."
msgstr ""
"Quiconque est familier avec ce pattern sait que l'invocation ``open`` de "
"cette façon s'assure que la fonction ``close``de ``f`` sera appelée à un "
"moment donné. Cela réduit la charge cognitive d'un développeur et rend le "
"code plus facile à lire."

#: ../../writing/structure.rst:626
msgid ""
"There are two easy ways to implement this functionality yourself: using a "
"class or using a generator. Let's implement the above functionality "
"ourselves, starting with the class approach:"
msgstr ""
"Il existe deux moyens faciles d’implémenter cette fonctionnalité vous-même: "
"en utilisant une classe ou à l'aide d'un générateur. Implémentons la "
"fonctionnalité ci-dessus nous-mêmes, en commençant par l'approche par classe:"

#: ../../writing/structure.rst:645
msgid ""
"This is just a regular Python object with two extra methods that are used by "
"the ``with`` statement. CustomOpen is first instantiated and then its "
"``__enter__`` method is called and whatever ``__enter__`` returns is "
"assigned to ``f`` in the ``as f`` part of the statement. When the contents "
"of the ``with`` block is finished executing, the ``__exit__`` method is then "
"called."
msgstr ""
"C'est juste un objet Python régulier avec deux méthodes supplémentaires qui "
"sont utilisés par la déclaration ``with``. CustomOpen est d'abord instancié "
"puis sa méthode ``__enter__`` est appelée et tout ce que ``__enter__`` "
"retourne est assigné à ``f`` dans la partie ``as _f`` de la déclaration. "
"Lorsque le contenu du bloc ``with`` a fini de s'exécuter, la méthode "
"``__exit__`` est alors appelée."

#: ../../writing/structure.rst:651
msgid ""
"And now the generator approach using Python's own `contextlib <https://docs."
"python.org/2/library/contextlib.html>`_:"
msgstr ""
"Et maintenant, l'approche par générateur en utilisant la bibliothèque "
"`contextlib <https://docs.python.org/2/library/contextlib.html>`_ de Python:"

#: ../../writing/structure.rst:669
msgid ""
"This works in exactly the same way as the class example above, albeit it's "
"more terse. The ``custom_open`` function executes until it reaches the "
"``yield`` statement. It then gives control back to the ``with`` statement, "
"which assigns whatever was ``yield``'ed to `f` in the ``as f`` portion. The "
"``finally`` clause ensures that ``close()`` is called whether or not there "
"was an exception inside the ``with``."
msgstr ""
"Cela fonctionne exactement de la même manière que l'exemple de classe ci-"
"dessus, mais il est plus laconique. La fonction ``custom_open`` s'exécute "
"jusqu'à la déclaration ``yield``. Il rend alors le contrôle à la déclaration "
"``with``, qui assigne tout ce qui était ``yield``'é à `f`dans la portion `as "
"f`. La clause ``finally`` s'assure que ``close()`` est appelé s'il y avait "
"ou non une exception à l'intérieur du ``with``."

#: ../../writing/structure.rst:676
msgid ""
"Since the two approaches appear the same, we should follow the Zen of Python "
"to decide when to use which. The class approach might be better if there's a "
"considerable amount of logic to encapsulate. The function approach might be "
"better for situations where we're dealing with a simple action."
msgstr ""
"Étant donné que les deux approches semblent similaires, nous devrions suivre "
"le Zen de Python pour décider quand utiliser laquelle. L'approche classe "
"pourrait être mieux s'il y a une quantité considérable de logique à "
"encapsuler. L'approche fonction pourrait être préférable pour des situations "
"où nous avons affaire à une action simple."

#: ../../writing/structure.rst:682
msgid "Dynamic typing"
msgstr "Typage dynamique"

#: ../../writing/structure.rst:684
msgid ""
"Python is dynamically typed, which means that variables do not have a fixed "
"type. In fact, in Python, variables are very different from what they are in "
"many other languages, specifically statically-typed languages. Variables are "
"not a segment of the computer's memory where some value is written, they are "
"'tags' or 'names' pointing to objects. It is therefore possible for the "
"variable 'a' to be set to the value 1, then to the value 'a string', then to "
"a function."
msgstr ""
"Python est typé dynamiquement, ce qui signifie que les variables n'ont pas "
"un type fixe. En fait, en Python, les variables sont très différentes de ce "
"qu'elles sont dans de nombreux autres langages, en particulier les langages "
"typés statiquement. Les variables ne sont pas un segment de la mémoire de "
"l'ordinateur où une certaine valeur est écrite, elles sont des 'tags' ou  "
"des 'noms' pointant vers des objets. Il est donc possible pour la variable "
"'a' d'être définie à la valeur 1, puis à la valeur 'a string', puis à une "
"fonction."

#: ../../writing/structure.rst:691
msgid ""
"The dynamic typing of Python is often considered to be a weakness, and "
"indeed it can lead to complexities and hard-to-debug code. Something named "
"'a' can be set to many different things, and the developer or the maintainer "
"needs to track this name in the code to make sure it has not been set to a "
"completely unrelated object."
msgstr ""
"Le typage dynamique de Python est souvent considéré comme une faiblesse, et "
"en effet, elle peut conduire à la complexité et à du code difficile à "
"débugguer. Quelque chose nommée 'a' peut être assigné à de nombreuses choses "
"différentes, et le développeur ou le mainteneur doit suivre ce nom dans le "
"code pour s'assurer qu'il n'a pas été assigné à un objet complètement "
"différent."

#: ../../writing/structure.rst:697
msgid "Some guidelines help to avoid this issue:"
msgstr "Quelques lignes directrices pour éviter ce problème:"

#: ../../writing/structure.rst:699
msgid "Avoid using the same variable name for different things."
msgstr "Évitez d'utiliser le même nom de variable pour des choses différentes."

#: ../../writing/structure.rst:701 ../../writing/structure.rst:725
#: ../../writing/structure.rst:788
msgid "**Bad**"
msgstr "**Mauvais**"

#: ../../writing/structure.rst:710 ../../writing/structure.rst:798
msgid "**Good**"
msgstr "**Bon**"

#: ../../writing/structure.rst:719
msgid ""
"Using short functions or methods helps reduce the risk of using the same "
"name for two unrelated things."
msgstr ""
"Utiliser des fonctions ou des méthodes courtes permet de réduire le risque "
"d'utiliser le même nom pour deux choses indépendantes."

#: ../../writing/structure.rst:722
msgid ""
"It is better to use different names even for things that are related, when "
"they have a different type:"
msgstr ""
"Il est préférable d'utiliser des noms différents, même pour des choses qui "
"sont liées, quand elles ont un type différent:"

#: ../../writing/structure.rst:733
msgid ""
"There is no efficiency gain when reusing names: the assignments will have to "
"create new objects anyway. However, when the complexity grows and each "
"assignment is separated by other lines of code, including 'if' branches and "
"loops, it becomes harder to ascertain what a given variable's type is."
msgstr ""
"Il n'y a pas de gain d'efficacité lors de la réutilisation de noms: les "
"affectations devront créer de nouveaux objets de toute façon. Toutefois, "
"lorsque la complexité augmente et chaque affectation est séparée par "
"d'autres lignes de code, incluant des branches 'si' et des boucles, il "
"devient plus difficile d'établir quel est le type d'une variable donnée."

#: ../../writing/structure.rst:739
msgid ""
"Some coding practices, like functional programming, recommend never "
"reassigning a variable. In Java this is done with the `final` keyword. "
"Python does not have a `final` keyword and it would be against its "
"philosophy anyway. However, it may be a good discipline to avoid assigning "
"to a variable more than once, and it helps in grasping the concept of "
"mutable and immutable types."
msgstr ""
"Certaines pratiques de codage, comme la programmation fonctionnelle, "
"recommandent de ne jamais réaffecter une variable. En Java cela se fait avec "
"le mot-clé `final`. Python n'a pas de mot-clé `final` et cela irait à "
"l'encontre de sa philosophie de toute façon. Cependant, cela peut être une "
"bonne discipline pour éviter d'assigner à une variable plus d'une fois, et "
"cela aide à comprendre le concept de types mutables et immutables."

#: ../../writing/structure.rst:746
msgid "Mutable and immutable types"
msgstr "Types mutables et immutables"

#: ../../writing/structure.rst:748
msgid "Python has two kinds of built-in or user-defined types."
msgstr "Python a deux sortes de types intégrés/définis par l'utilisateur."

#: ../../writing/structure.rst:750
msgid ""
"Mutable types are those that allow in-place modification of the content. "
"Typical mutables are lists and dictionaries: All lists have mutating "
"methods, like :py:meth:`list.append` or :py:meth:`list.pop`, and can be "
"modified in place. The same goes for dictionaries."
msgstr ""
"Les types mutables sont ceux qui permettent la modification sur place du "
"contenu. Des mutables typiques sont les listes et les dictionnaires: toutes "
"les listes ont des méthodes mutables, comme :py:meth:`list.append` ou :py:"
"meth:`list.pop`, et peuvent être modifiées sur place. La même chose vaut "
"pour les dictionnaires."

#: ../../writing/structure.rst:755
msgid ""
"Immutable types provide no method for changing their content. For instance, "
"the variable x set to the integer 6 has no \"increment\" method. If you want "
"to compute x + 1, you have to create another integer and give it a name."
msgstr ""
"Les types immuables fournissent aucune méthode pour modifier leur contenu. "
"Par exemple, la variable x définie à l'entier 6 n'a pas de méthode "
"\"increment\". Si vous voulez calculer x + 1, vous devez créer un autre "
"entier et lui donner un nom."

#: ../../writing/structure.rst:768
msgid ""
"One consequence of this difference in behavior is that mutable types are not "
"\"stable\", and therefore cannot be used as dictionary keys."
msgstr ""
"Une conséquence de cette différence de comportement est que les types "
"mutables ne sont pas \"stables\", et ne peuvent donc être utilisées comme "
"clés du dictionnaire."

#: ../../writing/structure.rst:772
msgid ""
"Using properly mutable types for things that are mutable in nature and "
"immutable types for things that are fixed in nature helps to clarify the "
"intent of the code."
msgstr ""
"L'utilisation correcte des types mutables pour des choses qui sont mutables "
"par nature et des types immutables pour des choses qui sont fixes par nature "
"aide à clarifier l'intention du code."

#: ../../writing/structure.rst:776
msgid ""
"For example, the immutable equivalent of a list is the tuple, created with "
"``(1, 2)``. This tuple is a pair that cannot be changed in-place, and can be "
"used as a key for a dictionary."
msgstr ""
"Par exemple, l'équivalent immutable d'une liste est le tuple, créé avec "
"``(1, 2)``. Ce tuple est une paire qui ne peut pas être changé sur place, et "
"qui peut être utilisée comme clé pour un dictionnaire."

#: ../../writing/structure.rst:780
msgid ""
"One peculiarity of Python that can surprise beginners is that strings are "
"immutable. This means that when constructing a string from its parts, it is "
"much more efficient to accumulate the parts in a list, which is mutable, and "
"then glue ('join') the parts together when the full string is needed. One "
"thing to notice, however, is that list comprehensions are better and faster "
"than constructing a list in a loop with calls to ``append()``."
msgstr ""
"Une particularité de Python qui peut surprendre les débutants est que les "
"chaînes sont immutables. Cela signifie que lors de la construction d'une "
"chaîne à partir de ses parties, il est beaucoup plus efficace d'accumuler "
"les parties dans une liste, qui est mutable, puis coller ('join') les "
"morceaux ensemble lorsque la chaîne complète est nécessaire. Une chose à "
"remarquer, cependant, est que les compréhensions de liste sont mieux et plus "
"rapides que la construction d'une liste dans une boucle avec des appels à "
"``append()``."

#: ../../writing/structure.rst:816
msgid ""
"One final thing to mention about strings is that using ``join()`` is not "
"always best. In the instances where you are creating a new string from a pre-"
"determined number of strings, using the addition operator is actually "
"faster, but in cases like above or in cases where you are adding to an "
"existing string, using ``join()`` should be your preferred method."
msgstr ""
"Une dernière chose à mentionner sur les chaînes est que l'utilisation "
"``join()`` n'est est pas toujours ce qu'il y a de mieux. Dans les cas où "
"vous créez une nouvelle chaîne depuis un nombre prédéterminé de chaînes, "
"utiliser l'opérateur d'addition est vraiment plus rapide, mais dans des cas "
"comme ci-dessus ou dans des cas où vous ajoutez à une chaîne existante, "
"utiliser ``join()`` devrait être votre méthode de préférence."

#: ../../writing/structure.rst:832
msgid ""
"You can also use the :ref:`% <python:string-formatting>` formatting operator "
"to concatenate a pre-determined number of strings besides :py:meth:`str."
"join` and ``+``. However, :pep:`3101`, discourages the usage of the ``%`` "
"operator in favor of the :py:meth:`str.format` method."
msgstr ""
"Vous pouvez également utiliser l'opérateur de formatage :ref:`% <python:"
"string-formatting>` pour concaténer un nombre prédéterminé de chaînes en "
"plus de :py:meth:`str.join` et ``+``. Cependant, la :pep:`3101`, décourage "
"l'utilisation de l'opérateur ``%`` en faveur de la méthode :py:meth:`str."
"format`."

#: ../../writing/structure.rst:848
msgid "Vendorizing Dependencies"
msgstr "Inclure les dépendances dans l'arbre de source de votre dépôt de code"

#: ../../writing/structure.rst:852
msgid "Runners"
msgstr "Runners"

#: ../../writing/structure.rst:856
msgid "Further Reading"
msgstr "Lectures complémentaires"

#: ../../writing/structure.rst:858
msgid "http://docs.python.org/2/library/"
msgstr "http://docs.python.org/2/library/"

#: ../../writing/structure.rst:859
msgid "http://www.diveintopython.net/toc/index.html"
msgstr "http://www.diveintopython.net/toc/index.html"
