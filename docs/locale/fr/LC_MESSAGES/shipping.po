# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016. A <a
# href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a>
# Project. <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC
# BY-NC-SA 3.0</a>
# This file is distributed under the same license as the pythonguide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-06-22 01:59+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 1.3\n"

#: ../../shipping/freezing.rst:5
msgid "Freezing Your Code"
msgstr ""

#: ../../shipping/freezing.rst:7
msgid ""
"\"Freezing\" your code is creating a single-file executable file to "
"distribute to end-users, that contains all of your application code as "
"well as the Python interpreter."
msgstr ""

#: ../../shipping/freezing.rst:11
msgid ""
"Applications such as 'Dropbox', 'Eve Online',  'Civilisation IV', and "
"BitTorrent clients do this."
msgstr ""

#: ../../shipping/freezing.rst:14
msgid ""
"The advantage of distributing this way is that your application will "
"\"just work\", even if the user doesn't already have the required version"
" of Python (or any) installed. On Windows, and even on many Linux "
"distributions and OS X, the right version of Python will not already be "
"installed."
msgstr ""

#: ../../shipping/freezing.rst:19
msgid ""
"Besides, end-user software should always be in an executable format. "
"Files ending in ``.py`` are for software engineers and system "
"administrators."
msgstr ""

#: ../../shipping/freezing.rst:22
msgid ""
"One disadvantage of freezing is that it will increase the size of your "
"distribution by about 2â€“12MB. Also, you will be responsible for shipping "
"updated versions of your application when security vulnerabilities to "
"Python are patched."
msgstr ""

#: ../../shipping/freezing.rst:28
msgid "Alternatives to Freezing"
msgstr ""

#: ../../shipping/freezing.rst:30
msgid ""
":ref:`Packaging your code <packaging-your-code-ref>` is for distributing "
"libraries or tools to other developers."
msgstr ""

#: ../../shipping/freezing.rst:33
msgid ""
"On Linux, an alternative to freezing is to :ref:`create a Linux distro "
"package <packaging-for-linux-distributions-ref>` (e.g. .deb files for "
"Debian or Ubuntu, or .rpm files for Red Hat and SuSE.)"
msgstr ""

#: ../../shipping/freezing.rst:0
msgid "Todo"
msgstr ""

#: ../../shipping/freezing.rst:37
msgid "Fill in \"Freezing Your Code\" stub"
msgstr ""

#: ../../shipping/freezing.rst:41
msgid "Comparison of Freezing Tools"
msgstr ""

#: ../../shipping/freezing.rst:43
msgid "Solutions and platforms/features supported:"
msgstr ""

#: ../../shipping/freezing.rst:46
msgid "Solution"
msgstr ""

#: ../../shipping/freezing.rst:46 ../../shipping/freezing.rst:66
msgid "Windows"
msgstr ""

#: ../../shipping/freezing.rst:46 ../../shipping/freezing.rst:170
msgid "Linux"
msgstr ""

#: ../../shipping/freezing.rst:46 ../../shipping/freezing.rst:115
msgid "OS X"
msgstr ""

#: ../../shipping/freezing.rst:46
msgid "Python 3"
msgstr ""

#: ../../shipping/freezing.rst:46
msgid "License"
msgstr ""

#: ../../shipping/freezing.rst:46
msgid "One-file mode"
msgstr ""

#: ../../shipping/freezing.rst:46
msgid "Zipfile import"
msgstr ""

#: ../../shipping/freezing.rst:46
msgid "Eggs"
msgstr ""

#: ../../shipping/freezing.rst:46
msgid "pkg_resources support"
msgstr ""

#: ../../shipping/freezing.rst:48 ../../shipping/freezing.rst:69
#: ../../shipping/freezing.rst:174
msgid "bbFreeze"
msgstr ""

#: ../../shipping/freezing.rst:48 ../../shipping/freezing.rst:49
#: ../../shipping/freezing.rst:50 ../../shipping/freezing.rst:51
#: ../../shipping/freezing.rst:52
msgid "yes"
msgstr ""

#: ../../shipping/freezing.rst:48 ../../shipping/freezing.rst:49
#: ../../shipping/freezing.rst:50 ../../shipping/freezing.rst:51
#: ../../shipping/freezing.rst:52
msgid "no"
msgstr ""

#: ../../shipping/freezing.rst:48 ../../shipping/freezing.rst:49
#: ../../shipping/freezing.rst:52
msgid "MIT"
msgstr ""

#: ../../shipping/freezing.rst:49 ../../shipping/freezing.rst:76
msgid "py2exe"
msgstr ""

#: ../../shipping/freezing.rst:50
msgid "pyInstaller"
msgstr ""

#: ../../shipping/freezing.rst:50
msgid "GPL"
msgstr ""

#: ../../shipping/freezing.rst:51
msgid "cx_Freeze"
msgstr ""

#: ../../shipping/freezing.rst:51
msgid "PSF"
msgstr ""

#: ../../shipping/freezing.rst:52 ../../shipping/freezing.rst:119
msgid "py2app"
msgstr ""

#: ../../shipping/freezing.rst:56
msgid ""
"Freezing Python code on Linux into a Windows executable was only once "
"supported in PyInstaller `and later dropped. "
"<http://stackoverflow.com/questions/2950971/cross-compiling-a-python-"
"script-on-linux-into-a-windows-executable#comment11890276_2951046>`_."
msgstr ""

#: ../../shipping/freezing.rst:61
msgid ""
"All solutions need MS Visual C++ dll to be installed on target machine, "
"except py2app. Only Pyinstaller makes self-executable exe that bundles "
"the dll when passing :option:`--onefile` to :file:`Configure.py`."
msgstr ""

#: ../../shipping/freezing.rst:71
msgid ""
"Prerequisite is to install :ref:`Python, Setuptools and pywin32 "
"dependency on Windows <install-windows>`."
msgstr ""

#: ../../shipping/freezing.rst:73
msgid "Write steps for most basic .exe"
msgstr ""

#: ../../shipping/freezing.rst:78
msgid "Prerequisite is to install :ref:`Python on Windows <install-windows>`."
msgstr ""

#: ../../shipping/freezing.rst:80
msgid "Download and install http://sourceforge.net/projects/py2exe/files/py2exe/"
msgstr ""

#: ../../shipping/freezing.rst:82
msgid ""
"Write :file:`setup.py` (`List of configuration options "
"<http://www.py2exe.org/index.cgi/ListOfOptions>`_):"
msgstr ""

#: ../../shipping/freezing.rst:93
msgid "(Optionally) `include icon <http://www.py2exe.org/index.cgi/CustomIcons>`_"
msgstr ""

#: ../../shipping/freezing.rst:95
msgid ""
"(Optionally) `one-file mode <http://stackoverflow.com/questions/112698"
"/py2exe-generate-single-executable-file#113014>`_"
msgstr ""

#: ../../shipping/freezing.rst:97
msgid "Generate :file:`.exe` into :file:`dist` directory:"
msgstr ""

#: ../../shipping/freezing.rst:103
msgid ""
"Provide the Microsoft Visual C runtime DLL. Two options: `globally "
"install dll on target machine <https://www.microsoft.com/en-"
"us/download/details.aspx?id=29>`_ or `distribute dll alongside with .exe "
"<http://www.py2exe.org/index.cgi/Tutorial#Step52>`_."
msgstr ""

#: ../../shipping/freezing.rst:106 ../../shipping/freezing.rst:122
#: ../../shipping/freezing.rst:177
msgid "PyInstaller"
msgstr ""

#: ../../shipping/freezing.rst:108
msgid ""
"Prerequisite is to have installed :ref:`Python, Setuptools and pywin32 "
"dependency on Windows <install-windows>`."
msgstr ""

#: ../../shipping/freezing.rst:110
msgid ""
"`Most basic tutorial <http://bojan-komazec.blogspot.com/2011/08/how-to-"
"create-windows-executable-from.html>`_"
msgstr ""

#: ../../shipping/freezing.rst:111
msgid ""
"`Manual "
"<http://www.pyinstaller.org/export/d3398dd79b68901ae1edd761f3fe0f4ff19cfb1a/project/doc/Manual.html?format=raw>`_"
msgstr ""

#: ../../shipping/freezing.rst:124
msgid ""
"PyInstaller can be used to build Unix executables and windowed apps on "
"Mac OS X 10.6 (Snow Leopard) or newer."
msgstr ""

#: ../../shipping/freezing.rst:126
msgid "To install PyInstaller, use pip:"
msgstr ""

#: ../../shipping/freezing.rst:132
msgid "To create a standard Unix executable, from say :code:`script.py`, use:"
msgstr ""

#: ../../shipping/freezing.rst:138
msgid "This creates,"
msgstr ""

#: ../../shipping/freezing.rst:140
msgid "a :code:`script.spec` file, analogous to a :code:`make` file"
msgstr ""

#: ../../shipping/freezing.rst:141
msgid "a :code:`build` folder, that holds some log files"
msgstr ""

#: ../../shipping/freezing.rst:142
msgid ""
"a :code:`dist` folder, that holds the main executable :code:`script`, and"
" some dependent Python libraries,"
msgstr ""

#: ../../shipping/freezing.rst:144
msgid ""
"all in the same folder as :code:`script.py`. PyInstaller puts all the "
"Python libraries used in :code:`script.py` into the :code:`dist` folder, "
"so when distributing the executable, distribute the whole :code:`dist` "
"folder."
msgstr ""

#: ../../shipping/freezing.rst:146
msgid ""
"The :code:`script.spec` file can be edited to `customise the build "
"<http://pythonhosted.org/PyInstaller/#spec-file-operation>`_, with "
"options such as"
msgstr ""

#: ../../shipping/freezing.rst:148
msgid "bundling data files with the executable"
msgstr ""

#: ../../shipping/freezing.rst:149
msgid ""
"including run-time libraries (:code:`.dll` or :code:`.so` files) that "
"PyInstaller can't infer automatically"
msgstr ""

#: ../../shipping/freezing.rst:150
msgid "adding Python run-time options to the executable,"
msgstr ""

#: ../../shipping/freezing.rst:152
msgid ""
"Now :code:`script.spec` can be run with :code:`pyinstaller` (instead of "
"using :code:`script.py` again):"
msgstr ""

#: ../../shipping/freezing.rst:158
msgid ""
"To create a standalone windowed OS X application, use the "
":code:`--windowed` option"
msgstr ""

#: ../../shipping/freezing.rst:164
msgid ""
"This creates a :code:`script.app` in the :code:`dist` folder. Make sure "
"to use GUI packages in your Python code, like `PyQt "
"<https://riverbankcomputing.com/software/pyqt/intro>`_ or `PySide "
"<http://wiki.qt.io/About-PySide>`_, to control the graphical parts of the"
" app."
msgstr ""

#: ../../shipping/freezing.rst:166
msgid ""
"There are several options in :code:`script.spec` related to Mac OS X app "
"bundles `here <http://pythonhosted.org/PyInstaller/#spec-file-options-"
"for-a-mac-os-x-bundle>`_. For example, to specify an icon for the app, "
"use the :code:`icon=\\path\\to\\icon.icns` option."
msgstr ""

#: ../../shipping/packaging.rst:5
msgid "Packaging Your Code"
msgstr ""

#: ../../shipping/packaging.rst:7
msgid ""
"Package your code to share it with other developers. For example to share"
" a library for other developers to use in their application, or for "
"development tools like 'py.test'."
msgstr ""

#: ../../shipping/packaging.rst:11
msgid ""
"An advantage of this method of distribution is its well established "
"ecosystem of tools such as PyPI and pip, which make it easy for other "
"developers to download and install your package either for casual "
"experiments, or as part of large, professional systems."
msgstr ""

#: ../../shipping/packaging.rst:16
msgid ""
"It is a well-established convention for Python code to be shared this "
"way. If your code isn't packaged on PyPI, then it will be harder for "
"other developers to find it, and to use it as part of their existing "
"process. They will regard such projects with substantial suspicion of "
"being either badly managed or abandoned."
msgstr ""

#: ../../shipping/packaging.rst:22
msgid ""
"The downside of distributing code like this is that it relies on the "
"recipient understanding how to install the required version of Python, "
"and being able and willing to use tools such as pip to install your "
"code's other dependencies. This is fine when distributing to other "
"developers, but makes this method unsuitable for distributing "
"applications to end-users."
msgstr ""

#: ../../shipping/packaging.rst:28
msgid ""
"The `Python Packaging Guide <https://python-packaging-user-"
"guide.readthedocs.org/en/latest/>`_ provides an extensive guide on "
"creating and maintaining Python packages."
msgstr ""

#: ../../shipping/packaging.rst:32
msgid "Alternatives to Packaging"
msgstr ""

#: ../../shipping/packaging.rst:34
msgid ""
"To distribute applications to end-users, you should :ref:`freeze your "
"application <freezing-your-code-ref>`."
msgstr ""

#: ../../shipping/packaging.rst:37
msgid ""
"On Linux, you may also want to consider :ref:`creating a Linux distro "
"package <packaging-for-linux-distributions-ref>` (e.g. a .deb file for "
"Debian or Ubuntu.)"
msgstr ""

#: ../../shipping/packaging.rst:42
msgid "For Python Developers"
msgstr ""

#: ../../shipping/packaging.rst:44
msgid ""
"If you're writing an open source Python module, `PyPI "
"<http://pypi.python.org>`_ , more properly known as *The Cheeseshop*, is "
"the place to host it."
msgstr ""

#: ../../shipping/packaging.rst:50
msgid "Pip vs. easy_install"
msgstr ""

#: ../../shipping/packaging.rst:52
msgid ""
"Use `pip <http://pypi.python.org/pypi/pip>`_.  More details `here "
"<http://stackoverflow.com/questions/3220404/why-use-pip-over-easy-"
"install>`_"
msgstr ""

#: ../../shipping/packaging.rst:57
msgid "Personal PyPI"
msgstr ""

#: ../../shipping/packaging.rst:59
msgid ""
"If you want to install packages from a source other than PyPI, (say, if "
"your packages are *proprietary*), you can do it by hosting a simple http "
"server, running from the directory which holds those packages which need "
"to be installed."
msgstr ""

#: ../../shipping/packaging.rst:64
msgid "**Showing an example is always beneficial**"
msgstr ""

#: ../../shipping/packaging.rst:66
msgid ""
"For example, if you want to install a package called "
":file:`MyPackage.tar.gz`, and assuming this is your directory structure:"
msgstr ""

#: ../../shipping/packaging.rst:72
msgid "archive"
msgstr ""

#: ../../shipping/packaging.rst:72
msgid "MyPackage"
msgstr ""

#: ../../shipping/packaging.rst:72
msgid "MyPackage.tar.gz"
msgstr ""

#: ../../shipping/packaging.rst:74
msgid "Go to your command prompt and type:"
msgstr ""

#: ../../shipping/packaging.rst:81
msgid ""
"This runs a simple http server running on port 9000 and will list all "
"packages (like **MyPackage**). Now you can install **MyPackage** using "
"any Python package installer. Using Pip, you would do it like:"
msgstr ""

#: ../../shipping/packaging.rst:89
msgid ""
"Having a folder with the same name as the package name is **crucial** "
"here. I got fooled by that, one time. But if you feel that creating a "
"folder called :file:`MyPackage` and keeping :file:`MyPackage.tar.gz` "
"inside that, is *redundant*, you can still install MyPackage using:"
msgstr ""

#: ../../shipping/packaging.rst:99
msgid "pypiserver"
msgstr ""

#: ../../shipping/packaging.rst:101
msgid ""
"`Pypiserver <https://pypi.python.org/pypi/pypiserver>`_ is a minimal PyPI"
" compatible server.  It can be used to serve a set of packages to "
"easy_install or pip.  It includes helpful features like an administrative"
" command (:option:`-U`) which will update all its packages to their "
"latest versions found on PyPI."
msgstr ""

#: ../../shipping/packaging.rst:109
msgid "S3-Hosted PyPi"
msgstr ""

#: ../../shipping/packaging.rst:111
msgid ""
"One simple option for a personal PyPi server is to use Amazon S3. A "
"prerequisite for this is that you have an Amazon AWS account with an S3 "
"bucket."
msgstr ""

#: ../../shipping/packaging.rst:114
msgid "**Install all your requirements from PyPi or another source**"
msgstr ""

#: ../../shipping/packaging.rst:115
msgid "**Install pip2pi**"
msgstr ""

#: ../../shipping/packaging.rst:117
msgid ":code:`pip install git+https://github.com/wolever/pip2pi.git`"
msgstr ""

#: ../../shipping/packaging.rst:119
msgid "**Follow pip2pi README for pip2tgz and dir2pi commands**"
msgstr ""

#: ../../shipping/packaging.rst:121
msgid ""
":code:`pip2tgz packages/ YourPackage` (or :code:`pip2tgz packages/ -r "
"requirements.txt`)"
msgstr ""

#: ../../shipping/packaging.rst:122
msgid ":code:`dir2pi packages/`"
msgstr ""

#: ../../shipping/packaging.rst:124
msgid "**Upload the new files**"
msgstr ""

#: ../../shipping/packaging.rst:126
msgid ""
"Use a client like Cyberduck to sync the entire :file:`packages` folder to"
" your s3 bucket"
msgstr ""

#: ../../shipping/packaging.rst:127
msgid ""
"Make sure you upload :code:`packages/simple/index.html` as well as all "
"new files and directories"
msgstr ""

#: ../../shipping/packaging.rst:129
msgid "**Fix new file permissions**"
msgstr ""

#: ../../shipping/packaging.rst:131
msgid ""
"By default, when you upload new files to the S3 bucket, they will have "
"the wrong permissions set."
msgstr ""

#: ../../shipping/packaging.rst:132
msgid ""
"Use the Amazon web console to set the READ permission of the files to "
"EVERYONE."
msgstr ""

#: ../../shipping/packaging.rst:133
msgid ""
"If you get HTTP 403 when trying to install a package, make sure you've "
"set the permissions correctly."
msgstr ""

#: ../../shipping/packaging.rst:135
msgid "**All done**"
msgstr ""

#: ../../shipping/packaging.rst:137
msgid ""
"You can now install your package with :code:`pip install --index-"
"url=http://your-s3-bucket/packages/simple/ YourPackage`"
msgstr ""

#: ../../shipping/packaging.rst:142
msgid "For Linux Distributions"
msgstr ""

#: ../../shipping/packaging.rst:144
msgid ""
"Creating a Linux distro package is arguably the \"right way\" to "
"distribute code on Linux."
msgstr ""

#: ../../shipping/packaging.rst:147
msgid ""
"Because a distribution package doesn't include the Python interpreter, it"
" makes the download and install about 2MB smaller than :ref:`freezing "
"your application <freezing-your-code-ref>`."
msgstr ""

#: ../../shipping/packaging.rst:151
msgid ""
"Also, if a distribution releases a new security update for Python, then "
"your application will automatically start using that new version of "
"Python."
msgstr ""

#: ../../shipping/packaging.rst:154
msgid ""
"The bdist_rpm command makes `producing an RPM file "
"<https://docs.python.org/3/distutils/builtdist.html#creating-rpm-"
"packages>`_ for use by distributions like Red Hat or SuSE is trivially "
"easy."
msgstr ""

#: ../../shipping/packaging.rst:157
msgid ""
"However, creating and maintaining the different configurations required "
"for each distribution's format (e.g. .deb for Debian/Ubuntu, .rpm for Red"
" Hat/Fedora, etc) is a fair amount of work. If your code is an "
"application that you plan to distribute on other platforms, then you'll "
"also have to create and maintain the separate config required to freeze "
"your application for Windows and OSX. It would be much less work to "
"simply create and maintain a single config for one of the cross platform "
":ref:`freezing tools <freezing-your-code-ref>`, which will produce stand-"
"alone executables for all distributions of Linux, as well as Windows and "
"OSX."
msgstr ""

#: ../../shipping/packaging.rst:167
msgid ""
"Creating a distribution package is also problematic if your code is for a"
" version of Python that isn't currently supported by a distribution. "
"Having to tell *some versions* of Ubuntu end-users that they need to add "
"`the 'dead-snakes' PPA "
"<https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes>`_ using `sudo "
"apt-repository` commands before they can install your .deb file makes for"
" an extremely hostile user experience. Not only that, but you'd have to "
"maintain a custom equivalent of these instructions for every "
"distribution, and worse, have your users read, understand, and act on "
"them."
msgstr ""

#: ../../shipping/packaging.rst:176
msgid "Having said all that, here's how to do it:"
msgstr ""

#: ../../shipping/packaging.rst:178
msgid "`Fedora <https://fedoraproject.org/wiki/Packaging:Python>`_"
msgstr ""

#: ../../shipping/packaging.rst:179
msgid ""
"`Debian and Ubuntu <http://www.debian.org/doc/packaging-manuals/python-"
"policy/>`_"
msgstr ""

#: ../../shipping/packaging.rst:180
msgid "`Arch <https://wiki.archlinux.org/index.php/Python_Package_Guidelines>`_"
msgstr ""

#: ../../shipping/packaging.rst:183
msgid "Useful Tools"
msgstr ""

#: ../../shipping/packaging.rst:185
msgid "`fpm <https://github.com/jordansissel/fpm>`_"
msgstr ""

#: ../../shipping/packaging.rst:186
msgid "`alien <http://joeyh.name/code/alien/>`_"
msgstr ""

