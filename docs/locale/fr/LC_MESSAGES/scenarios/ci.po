# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016. A <a
# href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a>
# Project. <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC
# BY-NC-SA 3.0</a>
# This file is distributed under the same license as the pythonguide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-03 01:22+0200\n"
"PO-Revision-Date: 2016-07-09 20:49+0100\n"
"Last-Translator: Thomas Gratier <thomas.gratier@webgeodatavore.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"X-Generator: Poedit 1.5.4\n"
"Language: fr\n"

#: ../../scenarios/ci.rst:2
msgid "Continuous Integration"
msgstr "Intégration continue"

#: ../../scenarios/ci.rst:6
msgid "Why?"
msgstr "Pourquoi?"

#: ../../scenarios/ci.rst:8
msgid ""
"Martin Fowler, who first wrote about `Continuous Integration <http://"
"martinfowler.com/articles/continuousIntegration.html>`_ (short: CI) together "
"with Kent Beck, describes the CI as follows:"
msgstr ""
"Martin Fowler, qui a été le premier à écrire à propos de `l'intégration "
"continue <http://martinfowler.com/articles/continuousIntegration.html>`_ "
"(Continuous Integration ou CI) avec Kent Beck, décrit la CI comme ce qui "
"suit:"

#: ../../scenarios/ci.rst:11
msgid ""
"Continuous Integration is a software development practice where members of a "
"team integrate their work frequently, usually each person integrates at "
"least daily - leading to multiple integrations per day. Each integration is "
"verified by an automated build (including test) to detect integration errors "
"as quickly as possible. Many teams find that this approach leads to "
"significantly reduced integration problems and allows a team to develop "
"cohesive software more rapidly."
msgstr ""
"L'intégration continue est une pratique de développement logiciel, où les "
"membres d'une équipe intègrent leur travail souvent, habituellement chaque "
"personne intègre au moins quotidiennement - conduisant à de multiples "
"intégrations par jour. Chaque intégration est vérifiée par un build "
"automatique (y compris le test) pour détecter les erreurs d'intégration "
"aussi rapidement que possible. De nombreuses équipes trouvent que cette "
"approche conduit à une réduction significative des problèmes d'intégration "
"et permet à une équipe de développer des logiciels cohérents plus rapidement."

#: ../../scenarios/ci.rst:20
msgid "Jenkins"
msgstr "Jenkins"

#: ../../scenarios/ci.rst:22
msgid ""
"`Jenkins CI <http://jenkins-ci.org>`_ is an extensible continuous "
"integration engine. Use it."
msgstr ""
"`Jenkins CI <http://jenkins-ci.org>`_ est un moteur d'intégration continue "
"extensible. Utilisez-le."

#: ../../scenarios/ci.rst:28
msgid "Buildbot"
msgstr "Buildbot"

#: ../../scenarios/ci.rst:30
msgid ""
"`Buildbot <http://docs.buildbot.net/current/>`_ is a Python system to "
"automate the compile/test cycle to validate code changes."
msgstr ""
"`Buildbot <http://docs.buildbot.net/current/>`_ est un système Python pour "
"automatiser le cycle de compilation/test pour valider les changements de "
"code."

#: ../../scenarios/ci.rst:36
msgid "Tox"
msgstr "Tox"

#: ../../scenarios/ci.rst:38
msgid ""
"`tox <http://tox.readthedocs.org/en/latest/>`_ is an automation tool "
"providing packaging, testing and deployment of Python software right from "
"the console or CI server. It is a generic virtualenv management and test "
"command line tool which provides the following features:"
msgstr ""
"`tox <http://tox.readthedocs.org/en/latest/>`_ est un outil d'automatisation "
"fournissant le packaging, les tests et le déploiement de logiciels Python "
"directement depuis la console ou le serveur d'intégration continue. C'est un "
"outil en ligne de commande de gestion d'environnement virtuel virtualenv "
"générique et de test qui fournit les fonctionnalités suivantes:"

#: ../../scenarios/ci.rst:43
msgid ""
"Checking that packages install correctly with different Python versions and "
"interpreters"
msgstr ""
"Vérifiant que les paquets s'installent correctement avec les différentes "
"versions de Python et ses différents interpréteurs"

#: ../../scenarios/ci.rst:45
msgid ""
"Running tests in each of the environments, configuring your test tool of "
"choice"
msgstr ""
"Exécutant des tests dans chacun des environnements, configurant l'outil de "
"test de votre choix"

#: ../../scenarios/ci.rst:47
msgid ""
"Acting as a front-end to Continuous Integration servers, reducing "
"boilerplate and merging CI and shell-based testing."
msgstr ""
"Agissant comme un front-end pour les serveurs d'intégration continue, "
"réduisant les surcouches et fusionnant la CI et les tests basés sur le shell."

#: ../../scenarios/ci.rst:52
msgid "Travis-CI"
msgstr "Travis-CI"

#: ../../scenarios/ci.rst:54
msgid ""
"`Travis-CI <https://travis-ci.org/>`_ is a distributed CI server which "
"builds tests for open source projects for free. It provides multiple workers "
"to run Python tests on and seamlessly integrates with GitHub. You can even "
"have it comment on your Pull Requests whether this particular changeset "
"breaks the build or not. So if you are hosting your code on GitHub, travis-"
"ci is a great and easy way to get started with Continuous Integration."
msgstr ""
"`Travis-CI <https://travis-ci.org/>`_ est un serveur de CI distribué qui "
"exécute des tests pour les projets open source gratuitement. Il fournit "
"plusieurs workers pour exécuter des tests Python sur et s'intègre de façon "
"transparente avec GitHub. Vous pouvez même faire des commentaires sur vos "
"Pull Requests si ce changeset particulier casse le build ou non. Donc, si "
"vous hébergez votre code sur GitHub, travis-ci est un bonne et facile "
"manière de commencer avec l'intégration continue."

#: ../../scenarios/ci.rst:61
msgid ""
"In order to get started, add a :file:`.travis.yml` file to your repository "
"with this example content::"
msgstr ""
"Pour commencer, ajoutez un fichier :file:`.travis.yml` à votre dépôt avec "
"cet exemple de contenu::"

#: ../../scenarios/ci.rst:77
msgid ""
"This will get your project tested on all the listed Python versions by "
"running the given script, and will only build the master branch. There are a "
"lot more options you can enable, like notifications, before and after steps "
"and much more. The `travis-ci docs <http://about.travis-ci.org/docs/>`_ "
"explain all of these options, and are very thorough."
msgstr ""
"Cela vous permettre d'avoir votre projet testé sur toutes les versions de "
"Python listées en exécutant le script donné, et ne fera que builder la "
"branche master. Il y a beaucoup plus d'options que vous pouvez activer, "
"comme les notifications, avant et après les étapes et bien plus encore. La "
"`documentation de travis-ci <http://about.travis-ci.org/docs/>`_ explique "
"toutes ces options, et est très complète."

#: ../../scenarios/ci.rst:83
msgid ""
"In order to activate testing for your project, go to `the travis-ci site "
"<https://travis-ci.org/>`_ and login with your GitHub account. Then activate "
"your project in your profile settings and you're ready to go. From now on, "
"your project's tests will be run on every push to GitHub."
msgstr ""
"Afin d'activer les tests pour votre projet, allez sur le `site travis-ci "
"<https://travis-ci.org/>`_ et connectez-vous avec votre compte GitHub. "
"Ensuite, activez votre projet dans vos paramètres de profil et vous êtes "
"bon. A partir de maintenant, les tests de votre projet seront exécutés sur "
"tous les push vers GitHub."
