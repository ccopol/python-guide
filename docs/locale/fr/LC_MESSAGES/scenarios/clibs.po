# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016. A <a
# href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a>
# Project. <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC
# BY-NC-SA 3.0</a>
# This file is distributed under the same license as the pythonguide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-03 01:22+0200\n"
"PO-Revision-Date: 2016-07-09 10:45+0100\n"
"Last-Translator: Thomas Gratier <thomas.gratier@webgeodatavore.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"X-Generator: Poedit 1.5.4\n"
"Language: fr\n"

#: ../../scenarios/clibs.rst:2
msgid "Interfacing with C/C++ Libraries"
msgstr "Interfaçage avec les bibliothèques C/C++"

#: ../../scenarios/clibs.rst:5
msgid "C Foreign Function Interface"
msgstr "C Foreign Function Interface"

#: ../../scenarios/clibs.rst:7
msgid ""
"`CFFI <https://cffi.readthedocs.org/en/latest/>`_ provides a simple to use "
"mechanism for interfacing with C from both CPython and PyPy. It supports two "
"modes: an inline ABI compatibility mode (example provided below), which "
"allows you to dynamically load and run functions from executable modules "
"(essentially exposing the same functionality as LoadLibrary or dlopen), and "
"an API mode, which allows you to build C extension modules."
msgstr ""
"`CFFI <https://cffi.readthedocs.org/en/latest/>`_ fournit un mécanisme "
"simple à utiliser pour l'interfaçage avec C à la fois depuis CPython et "
"PyPy. Il prend en charge deux modes: un mode de compatibilité ABI inline "
"(exemple ci-dessous), ce qui vous permet de charger et exécuter "
"dynamiquement des fonctions depuis des modules exécutables (exposant "
"essentiellement les mêmes fonctionnalités que LoadLibrary ou dlopen), et un "
"mode API, qui vous permet de construire des modules d'extension C."

#: ../../scenarios/clibs.rst:15
msgid "ABI Interaction"
msgstr "Interaction avec ABI  (Application Binary Interface)"

#: ../../scenarios/clibs.rst:29
msgid "ctypes"
msgstr "ctypes"

#: ../../scenarios/clibs.rst:31
msgid ""
"`ctypes <https://docs.python.org/3/library/ctypes.html>`_ is the de facto "
"library for interfacing with C/C++ from CPython, and it provides not only "
"full access to the native C interface of most major operating systems (e.g., "
"kernel32 on Windows, or libc on \\*nix), but also provides support for "
"loading and interfacing with dynamic libraries, such as DLLs or shared "
"objects at runtime. It does bring along with it a whole host of types for "
"interacting with system APIs, and allows you to rather easily define your "
"own complex types, such as structs and unions, and allows you to modify "
"things such as padding and alignment, if needed. It can be a bit crufty to "
"use, but in conjunction with the `struct <https://docs.python.org/3.5/"
"library/struct.html>`_ module, you are essentially provided full control "
"over how your data types get translated into something something usable by a "
"pure C(++) method."
msgstr ""
"`ctypes <https://docs.python.org/3/library/ctypes.html>`_ est la "
"bibliothèque de fait pour l'interfaçage avec C/C ++ depuis CPython, et il "
"fournit non seulement un accès complet à l'interface C native de la plupart "
"des principaux systèmes d'exploitation (par exemple, kernel32 sur Windows, "
"ou libc sur \\*nix), mais fournit également le support pour le chargement et "
"l'interfaçage avec des bibliothèques dynamiques, telles que les DLL ou les "
"objets partagés (Shared Objects ou SO) lors de l'exécution. Il embarque avec "
"lui toute une série de types pour interagir avec les APIs système, et vous "
"permet de définir assez facilement vos propres types complexes, tels que les "
"structs et les unions, et vous permet de modifier des choses telles que le "
"padding et l'alignement, si nécessaire. Il peut être un peu retors à "
"utiliser, mais conjointement avec le module `struct <https://docs.python."
"org/3.5/library/struct.html>`_, vous recevez essentiellement un contrôle "
"complet sur la façon dont vos types de données sont traduits en quelque "
"chose d'utilisable par une méthode C(++) pure."

#: ../../scenarios/clibs.rst:45
msgid "Struct Equivalents"
msgstr "Équivalents de struct"

#: ../../scenarios/clibs.rst:47
msgid ":file:`MyStruct.h`"
msgstr ":file:`MyStruct.h`"

#: ../../scenarios/clibs.rst:57
msgid ":file:`MyStruct.py`"
msgstr ":file:`MyStruct.py`"

#: ../../scenarios/clibs.rst:68
msgid "SWIG"
msgstr "SWIG"

#: ../../scenarios/clibs.rst:70
msgid ""
"`SWIG <http://www.swig.org>`_, though not strictly Python focused (it "
"supports a large number of scripting languages), is a tool for generating "
"bindings for interpreted languages from C/C++ header files. It is extremely "
"simple to use: the consumer simply needs to define an interface file "
"(detailed in the tutorial and documentations), include the requisite C/C++ "
"headers, and run the build tool against them. While it does have some "
"limits, (it currently seems to have issues with a small subset of newer C++ "
"features, and getting template-heavy code to work can be a bit verbose), it "
"provides a great deal of power and exposes lots of features to Python with "
"little effort. Additionally, you can easily extend the bindings SWIG creates "
"(in the interface file) to overload operators and built-in methods, "
"effectively re- cast C++ exceptions to be catchable by Python, etc."
msgstr ""
"`SWIG <http://www.swig.org>`_, bien que pas strictement orienté Python (il "
"prend en charge un grand nombre de langages de scripting), est un outil pour "
"générer des bindings pour les langages interprétés à partir des fichiers "
"d'en-tête C/C++. Il est extrêmement simple de l'utiliser: le consommateur "
"doit simplement définir un fichier d'interface (détaillée dans le tutoriel "
"et la documentation), inclure les en-têtes C/C ++ nécessaires, et exécuter "
"l'outil de build sur eux. Alors qu'il a quelques limites, (il semble "
"actuellement avoir des problèmes avec un petit sous-ensemble de nouvelles "
"fonctionnalités C++, et avoir du code avec des templates partout pour "
"travailler peut être un peu verbeux), il est très puissant et expose "
"beaucoup de fonctionnalités pour Python avec peu d'effort. En outre, vous "
"pouvez facilement étendre les bindings SWIG créés (dans le fichier "
"d'interface) pour surcharger les opérateurs et les méthodes intégrées, "
"recaster les exceptions C++ pour être capturables par Python, etc."

#: ../../scenarios/clibs.rst:84
msgid "Example: Overloading __repr__"
msgstr "Exemple: Overloading __repr__"

#: ../../scenarios/clibs.rst:86
msgid ":file:`MyClass.h`"
msgstr ":file:`MyClass.h`"

#: ../../scenarios/clibs.rst:99
msgid ":file:`myclass.i`"
msgstr ":file:`myclass.i`"

#: ../../scenarios/clibs.rst:123
msgid "Boost.Python"
msgstr "Boost.Python"

#: ../../scenarios/clibs.rst:125
msgid ""
"`Boost.Python <http://www.boost.org/doc/libs/1_59_0/libs/python/doc/>`_ "
"requires a bit more manual work to expose C++ object functionality, but it "
"is capable of providing all the same features SWIG does and then some, to "
"include providing wrappers to access PyObjects in C++, extracting SWIG- "
"wrapper objects, and even embedding bits of Python into your C++ code."
msgstr ""
"`Boost.Python <http://www.boost.org/doc/libs/1_59_0/libs/python/doc/>`_ "
"nécessite un peu plus de travail manuel pour exposer la fonctionnalité "
"d'un objet C++, mais il est capable de fournir tous les fonctionnalités que "
"SWIG fournit, et quelques unes pour inclure des wrappers pour accéder à des "
"objets Python en C ++, en extrayant des objets wrappés SWIG-, et même "
"permettant d'incorporer des morceaux de Python dans votre code C++."
