# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016. A <a
# href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a>
# Project. <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC
# BY-NC-SA 3.0</a>
# This file is distributed under the same license as the pythonguide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-03 01:22+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../shipping/packaging.rst:5
msgid "Packaging Your Code"
msgstr ""

#: ../../shipping/packaging.rst:7
msgid ""
"Package your code to share it with other developers. For example to share"
" a library for other developers to use in their application, or for "
"development tools like 'py.test'."
msgstr ""

#: ../../shipping/packaging.rst:11
msgid ""
"An advantage of this method of distribution is its well established "
"ecosystem of tools such as PyPI and pip, which make it easy for other "
"developers to download and install your package either for casual "
"experiments, or as part of large, professional systems."
msgstr ""

#: ../../shipping/packaging.rst:16
msgid ""
"It is a well-established convention for Python code to be shared this "
"way. If your code isn't packaged on PyPI, then it will be harder for "
"other developers to find it, and to use it as part of their existing "
"process. They will regard such projects with substantial suspicion of "
"being either badly managed or abandoned."
msgstr ""

#: ../../shipping/packaging.rst:22
msgid ""
"The downside of distributing code like this is that it relies on the "
"recipient understanding how to install the required version of Python, "
"and being able and willing to use tools such as pip to install your "
"code's other dependencies. This is fine when distributing to other "
"developers, but makes this method unsuitable for distributing "
"applications to end-users."
msgstr ""

#: ../../shipping/packaging.rst:28
msgid ""
"The `Python Packaging Guide <https://python-packaging-user-"
"guide.readthedocs.org/en/latest/>`_ provides an extensive guide on "
"creating and maintaining Python packages."
msgstr ""

#: ../../shipping/packaging.rst:32
msgid "Alternatives to Packaging"
msgstr ""

#: ../../shipping/packaging.rst:34
msgid ""
"To distribute applications to end-users, you should :ref:`freeze your "
"application <freezing-your-code-ref>`."
msgstr ""

#: ../../shipping/packaging.rst:37
msgid ""
"On Linux, you may also want to consider :ref:`creating a Linux distro "
"package <packaging-for-linux-distributions-ref>` (e.g. a .deb file for "
"Debian or Ubuntu.)"
msgstr ""

#: ../../shipping/packaging.rst:42
msgid "For Python Developers"
msgstr ""

#: ../../shipping/packaging.rst:44
msgid ""
"If you're writing an open source Python module, `PyPI "
"<http://pypi.python.org>`_ , more properly known as *The Cheeseshop*, is "
"the place to host it."
msgstr ""

#: ../../shipping/packaging.rst:50
msgid "Pip vs. easy_install"
msgstr ""

#: ../../shipping/packaging.rst:52
msgid ""
"Use `pip <http://pypi.python.org/pypi/pip>`_.  More details `here "
"<http://stackoverflow.com/questions/3220404/why-use-pip-over-easy-"
"install>`_"
msgstr ""

#: ../../shipping/packaging.rst:57
msgid "Personal PyPI"
msgstr ""

#: ../../shipping/packaging.rst:59
msgid ""
"If you want to install packages from a source other than PyPI, (say, if "
"your packages are *proprietary*), you can do it by hosting a simple http "
"server, running from the directory which holds those packages which need "
"to be installed."
msgstr ""

#: ../../shipping/packaging.rst:64
msgid "**Showing an example is always beneficial**"
msgstr ""

#: ../../shipping/packaging.rst:66
msgid ""
"For example, if you want to install a package called "
":file:`MyPackage.tar.gz`, and assuming this is your directory structure:"
msgstr ""

#: ../../shipping/packaging.rst:72
msgid "archive"
msgstr ""

#: ../../shipping/packaging.rst:72
msgid "MyPackage"
msgstr ""

#: ../../shipping/packaging.rst:72
msgid "MyPackage.tar.gz"
msgstr ""

#: ../../shipping/packaging.rst:74
msgid "Go to your command prompt and type:"
msgstr ""

#: ../../shipping/packaging.rst:81
msgid ""
"This runs a simple http server running on port 9000 and will list all "
"packages (like **MyPackage**). Now you can install **MyPackage** using "
"any Python package installer. Using Pip, you would do it like:"
msgstr ""

#: ../../shipping/packaging.rst:89
msgid ""
"Having a folder with the same name as the package name is **crucial** "
"here. I got fooled by that, one time. But if you feel that creating a "
"folder called :file:`MyPackage` and keeping :file:`MyPackage.tar.gz` "
"inside that, is *redundant*, you can still install MyPackage using:"
msgstr ""

#: ../../shipping/packaging.rst:99
msgid "pypiserver"
msgstr ""

#: ../../shipping/packaging.rst:101
msgid ""
"`Pypiserver <https://pypi.python.org/pypi/pypiserver>`_ is a minimal PyPI"
" compatible server.  It can be used to serve a set of packages to "
"easy_install or pip.  It includes helpful features like an administrative"
" command (:option:`-U`) which will update all its packages to their "
"latest versions found on PyPI."
msgstr ""

#: ../../shipping/packaging.rst:109
msgid "S3-Hosted PyPi"
msgstr ""

#: ../../shipping/packaging.rst:111
msgid ""
"One simple option for a personal PyPi server is to use Amazon S3. A "
"prerequisite for this is that you have an Amazon AWS account with an S3 "
"bucket."
msgstr ""

#: ../../shipping/packaging.rst:114
msgid "**Install all your requirements from PyPi or another source**"
msgstr ""

#: ../../shipping/packaging.rst:115
msgid "**Install pip2pi**"
msgstr ""

#: ../../shipping/packaging.rst:117
msgid ":code:`pip install git+https://github.com/wolever/pip2pi.git`"
msgstr ""

#: ../../shipping/packaging.rst:119
msgid "**Follow pip2pi README for pip2tgz and dir2pi commands**"
msgstr ""

#: ../../shipping/packaging.rst:121
msgid ""
":code:`pip2tgz packages/ YourPackage` (or :code:`pip2tgz packages/ -r "
"requirements.txt`)"
msgstr ""

#: ../../shipping/packaging.rst:122
msgid ":code:`dir2pi packages/`"
msgstr ""

#: ../../shipping/packaging.rst:124
msgid "**Upload the new files**"
msgstr ""

#: ../../shipping/packaging.rst:126
msgid ""
"Use a client like Cyberduck to sync the entire :file:`packages` folder to"
" your s3 bucket"
msgstr ""

#: ../../shipping/packaging.rst:127
msgid ""
"Make sure you upload :code:`packages/simple/index.html` as well as all "
"new files and directories"
msgstr ""

#: ../../shipping/packaging.rst:129
msgid "**Fix new file permissions**"
msgstr ""

#: ../../shipping/packaging.rst:131
msgid ""
"By default, when you upload new files to the S3 bucket, they will have "
"the wrong permissions set."
msgstr ""

#: ../../shipping/packaging.rst:132
msgid ""
"Use the Amazon web console to set the READ permission of the files to "
"EVERYONE."
msgstr ""

#: ../../shipping/packaging.rst:133
msgid ""
"If you get HTTP 403 when trying to install a package, make sure you've "
"set the permissions correctly."
msgstr ""

#: ../../shipping/packaging.rst:135
msgid "**All done**"
msgstr ""

#: ../../shipping/packaging.rst:137
msgid ""
"You can now install your package with :code:`pip install --index-"
"url=http://your-s3-bucket/packages/simple/ YourPackage`"
msgstr ""

#: ../../shipping/packaging.rst:142
msgid "For Linux Distributions"
msgstr ""

#: ../../shipping/packaging.rst:144
msgid ""
"Creating a Linux distro package is arguably the \"right way\" to "
"distribute code on Linux."
msgstr ""

#: ../../shipping/packaging.rst:147
msgid ""
"Because a distribution package doesn't include the Python interpreter, it"
" makes the download and install about 2MB smaller than :ref:`freezing "
"your application <freezing-your-code-ref>`."
msgstr ""

#: ../../shipping/packaging.rst:151
msgid ""
"Also, if a distribution releases a new security update for Python, then "
"your application will automatically start using that new version of "
"Python."
msgstr ""

#: ../../shipping/packaging.rst:154
msgid ""
"The bdist_rpm command makes `producing an RPM file "
"<https://docs.python.org/3/distutils/builtdist.html#creating-rpm-"
"packages>`_ for use by distributions like Red Hat or SuSE is trivially "
"easy."
msgstr ""

#: ../../shipping/packaging.rst:157
msgid ""
"However, creating and maintaining the different configurations required "
"for each distribution's format (e.g. .deb for Debian/Ubuntu, .rpm for Red"
" Hat/Fedora, etc) is a fair amount of work. If your code is an "
"application that you plan to distribute on other platforms, then you'll "
"also have to create and maintain the separate config required to freeze "
"your application for Windows and OSX. It would be much less work to "
"simply create and maintain a single config for one of the cross platform "
":ref:`freezing tools <freezing-your-code-ref>`, which will produce stand-"
"alone executables for all distributions of Linux, as well as Windows and "
"OSX."
msgstr ""

#: ../../shipping/packaging.rst:167
msgid ""
"Creating a distribution package is also problematic if your code is for a"
" version of Python that isn't currently supported by a distribution. "
"Having to tell *some versions* of Ubuntu end-users that they need to add "
"`the 'dead-snakes' PPA "
"<https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes>`_ using `sudo "
"apt-repository` commands before they can install your .deb file makes for"
" an extremely hostile user experience. Not only that, but you'd have to "
"maintain a custom equivalent of these instructions for every "
"distribution, and worse, have your users read, understand, and act on "
"them."
msgstr ""

#: ../../shipping/packaging.rst:176
msgid "Having said all that, here's how to do it:"
msgstr ""

#: ../../shipping/packaging.rst:178
msgid "`Fedora <https://fedoraproject.org/wiki/Packaging:Python>`_"
msgstr ""

#: ../../shipping/packaging.rst:179
msgid ""
"`Debian and Ubuntu <http://www.debian.org/doc/packaging-manuals/python-"
"policy/>`_"
msgstr ""

#: ../../shipping/packaging.rst:180
msgid "`Arch <https://wiki.archlinux.org/index.php/Python_Package_Guidelines>`_"
msgstr ""

#: ../../shipping/packaging.rst:183
msgid "Useful Tools"
msgstr ""

#: ../../shipping/packaging.rst:185
msgid "`fpm <https://github.com/jordansissel/fpm>`_"
msgstr ""

#: ../../shipping/packaging.rst:186
msgid "`alien <http://joeyh.name/code/alien/>`_"
msgstr ""

